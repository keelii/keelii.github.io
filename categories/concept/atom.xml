<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concept on 臨池不輟</title>
    <link>https://keelii.com/categories/concept/</link>
    <description>Recent content in concept on 臨池不輟</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 06 Jul 2019 18:33:57 +0800</lastBuildDate>
    
        <atom:link href="https://keelii.com/categories/concept/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我想要 AOP — 使用 AOP 分离关注点</title>
      <link>https://keelii.com/2019/07/06/i-want-my-aop-cn/</link>
      <pubDate>Sat, 06 Jul 2019 18:33:57 +0800</pubDate>
      
      <guid>https://keelii.com/2019/07/06/i-want-my-aop-cn/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;本文翻译自：&lt;a href=&#34;https://www.javaworld.com/article/2073918/i-want-my-aop---part-1.html&#34;&gt;I want my AOP&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;关注点&lt;/strong&gt;表示人们的一种特殊的意愿、理念或是某个感兴趣的领域。从技术角度来讲：软件系统包括若干&lt;strong&gt;核心的&lt;/strong&gt;、&lt;strong&gt;系统级别的&lt;/strong&gt;关注点。比方说：信用卡处理系统的&lt;strong&gt;核心&lt;/strong&gt;关注点是处理交易，同时系统级别的关注点或许应该是处理日志、事务、一致性、授权、安全、性能等。许多这种关注点被叫做&lt;strong&gt;横切关注点&lt;/strong&gt; — 往往会影响许多模块的实现。&lt;/p&gt;

&lt;p&gt;使用目前的编程方法，跨越多个模块横切关注点会导致系统更难设计、理解、实现和迭代。&lt;/p&gt;

&lt;p&gt;阅读完全的「我想要 AOP」系列文章：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一部分&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第二部分&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第三部分&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;面向切面的编程相比之前的方法更简单的分享了关注点，从而提供横切关注点的模块化。&lt;/p&gt;

&lt;p&gt;在本系列文章中，第一篇涉及 AOP 的概念，我首先解释了在一般复杂的软件系统中由横切关注点引起的问题。然后，我引入了 AOP 核心概念，并展示了 AOP 是如何通过横切关注点解决问题的。&lt;/p&gt;

&lt;p&gt;这个系列的第二篇文章将介绍 AspectJ，Xerox PARC 基于 Java 实现的 AOP 框架。最后一篇文章将以几个示例的方式向你展示 AOP 的概念，并基于建立更易懂、易实现、易迭代的软件系统。&lt;/p&gt;

&lt;h2 id=&#34;软件编程方法的演进&#34;&gt;软件编程方法的演进&lt;/h2&gt;

&lt;p&gt;早些年的计算机科学领域，开发者直接使用机器码进行编程。不幸的是，程序员花了更多时间去考虑特定机器的指令集而不是手头的问题。慢慢地，我们迁移到高级编程语言，高级编程语言允许对底层机器码进行一些抽象。然后结构化的语言出现了；我们现在可以根据任务的执行过程来分解我们的问题。然而，随着复杂度的增长，我们需要更好的技术。面向对象的编程让我们可以把系统看成一系列的合作对象。类可以让我们隐藏接口背后的实现细节。多态提供了通用行的为和接口，并允许更特殊的组件更改指定定行为，而无需接触基本概念的实现。&lt;/p&gt;

&lt;p&gt;编程方法和语言定义了我们与机器交流的方式。每一种新方法都提供某种分解问题的方式：机器码、独立于机器的代码、过程、类等等。每种方法都在建立某种&lt;strong&gt;系统需求&lt;/strong&gt;与&lt;strong&gt;程序结构&lt;/strong&gt;之间的对应关系。这些编程方法的演进让我们可以创建越来越复杂的系统。反过来复杂的系统使得我们又必须使用更先进的技术去解决这些复杂度。&lt;/p&gt;

&lt;p&gt;目前来讲，放多新的软件项目开发都使用面向对象的编程模式。的确，面向对象的编程模式能模拟常见行为方面表现出了强大的能力。然而，我们很快将会看见，或许你已经有所体验了，面向对象的编程模式没能充分地解决许多跨区的行为的问题 — 那种通常不相关的模块。相比而言，面向切面的编程方法填补了这个空白。AOP 很可能代表了编程方法演进的下一个重要方向。&lt;/p&gt;

&lt;h2 id=&#34;将系统看做一系列的关注点&#34;&gt;将系统看做一系列的关注点&lt;/h2&gt;

&lt;p&gt;我们可以将复杂系统看做是多个关注点的联合实现。典型的系统可能包含多种关注点，包括业务逻辑、性能、数据持久化 、日志，以及调试、授权、安全、线程安全 、错误检查等等。而且你还会遇到开发流程中的关注点，比如说：可理解、可维护，可追溯、更易迭代。图1描绘出了一个系统中不同模块关注点的实现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/07/05/5d1f0bb5278bd31387.gif&#34; alt=&#34;&#34; /&gt;图1&lt;/p&gt;

&lt;p&gt;图2展示了一系列的需求（一个光束）通过关注点识别器（棱镜）分离各种关注点成为独立模块。这个过程就对应着我们开发过程的关注点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/07/05/5d1f0d071673b46919.gif&#34; alt=&#34;&#34; /&gt;图2&lt;/p&gt;

&lt;h2 id=&#34;在系统中进行横切&#34;&gt;在系统中进行横切&lt;/h2&gt;

&lt;p&gt;开发者建立一个系统并且负责实现多个需求。我们可以把这些需求大体上从&lt;strong&gt;核心模块&lt;/strong&gt;级别需求与&lt;strong&gt;系统级别&lt;/strong&gt;需求两个维度进行分类。许多系统级别的需求相互之间（或与模块级别的需求）是正交的（相互依赖）。系统级别的需求倾向于横切许多核心模块，比如，一个个典型的企业应用包含的横切关注点有：身份验证，日志记录，资源池，管理，性能和存储管理。每个都被横切成多个子系统。比如，存储管理会影响每个业务对象。&lt;/p&gt;

&lt;p&gt;让我们举个简单的例子，比如有一个单例实现封装了一些业务逻辑：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SomeBusinessClass extends OtherBusinessClass {
    // 核心数据成员
    // 其它数据成员：比如日志，数据一致性标识
    // 重写基类中的方法
    public void performSomeOperation(OperationInformation info) {
        // 保证授权正常
        // 保证条件正常满足
        // 锁定对象保证数据一致性
        // 线程进入threads access it
        // 保证缓存正常
        // 打印操作启动日志
        // ==== 进行具体的操作 ====
        // 打印操作完成日志
        // 解锁对象
    }
    // 与上面类似的其它操作
    public void save(PersitanceStorage ps) {
    }
    public void load(PersitanceStorage ps) {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码中我们必须考虑至少三个问题，首先，&lt;strong&gt;其它数据成员&lt;/strong&gt;不属于这个类所关心的内容。其次，performSomeOperation 的实现似乎比核心操作执行了更多的逻辑；它处理了日志、授权、线程安全以及其它&lt;strong&gt;外部&lt;/strong&gt;关注点。重要的是，似乎这些许多外围关注点其它类也会用到。最后，save() 和 load() 方法操作存储层，这两个方法放在这个类中比较合适还是放在其它类中比较合适，这个问题并不是很清楚。&lt;/p&gt;

&lt;h2 id=&#34;横切关注的问题&#34;&gt;横切关注的问题&lt;/h2&gt;

&lt;p&gt;虽然会跨模块横切关注点，但是现在的技术实现倾向于使用一维的方式实现，把问题聚焦在需求与实现的单一维度。这个单一维度的实现将变成&lt;strong&gt;核心模块&lt;/strong&gt;级别的实现。其余的需求围绕着这个主导维度被分类。换句话说，需求空间是多维的，然而实现空间是单维的。这种不匹配会导致需求与实现之间的映射难以做到。&lt;/p&gt;

&lt;h3 id=&#34;症状&#34;&gt;症状&lt;/h3&gt;

&lt;p&gt;使用目前的方法实现横切关注点会出现一些问题/症状，大体上分两类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码纠缠&lt;/strong&gt;：系统中的模块可能会同时地与多个需求交互。比如，开发者经常同时考虑业务逻辑、性能、同步、日志和安全等问题。大量的并行需求导致需要许多关注点的实现同时存在，最终导致代码纠缠。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码分散&lt;/strong&gt;：由于横切关注点，按定义，很多模块都需要分离，甚至是相关的实现都需要分离。比如，一个使用数据库的系统，性能问题可能会影响所有访问数据库的模块&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;暗示&#34;&gt;暗示&lt;/h3&gt;

&lt;p&gt;代码纠缠与代码分散对软件设计和开发有以下影响：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不可追溯&lt;/strong&gt;：同时分离多个关注点会&lt;strong&gt;掩盖&lt;/strong&gt;关注点与实现之间的对应关系，导致关系不清楚&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;低效的&lt;/strong&gt;：同时实现多个关注点会打乱开发者的注意力，将注意力分散到外围问题上，这将导致低效&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码复用性低&lt;/strong&gt;：由于模块实现了多个需求，其它系统将无法很容易地复用这个模块，进一步导致低效&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码质量低&lt;/strong&gt;：代码纠缠会产生一些不易查觉的问题。此外，一次关注太多问题，某些关注点可能没有被真正关注到&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;难于迭代&lt;/strong&gt;：有限的视界和受限的资源通常会产生仅解决当前关注点的设计。解决未来问题通常需要重新实现。由于这个实现并不是模块化的，这表示触摸许多模块。为了实现新需求需要修改每个子系统可能会引起不一致的问题。它还需要大量的测试工作来保证实现做出的变更没有引入新问题。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;目前的解决方式&#34;&gt;目前的解决方式&lt;/h3&gt;

&lt;p&gt;由于大多数系统都可以横切关注点，因此出现模块化实现的一些技术就不足为奇了。这些技术包括混入（mix-in）类，设计模式和领域特定的解决方案。&lt;/p&gt;

&lt;p&gt;使用混入类可以让你延迟分离关注点到最终的实现。主类包含混入类实例，并允许系统的其他部分设置该实例。例如，上面的信用卡处理例子，将一个实现了业务逻辑的类组合成混入类，系统的其它模块可以通过配置来获取适合自身的日志器。例如，日志器可以设置成使用文件系统或者消息中间件。发送日志的被延后了，但是各个消息发送点（调用的地方）还是需要加入相关的代码。&lt;/p&gt;

&lt;p&gt;基于行为的设计模式，比如说访问者、模板方法，可以让你延迟实现。但是就像混入类一样，控制操作—调用访问逻辑或者模板方法—仍然在主类中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;领域特定&lt;/strong&gt;的解决方案，比如说框架和应用服务，让开发者可以用模块化的方式实现横切关注点。比如 EJB 架构，在安全、管理、性能和持久容器管理方面实现横切关注点。Bean 的开发者专注于业务逻辑，部署工程师专注于部署相关问题，比如 bean-data 与数据库的对应关系。对于 Bean 开发者来讲其余需要关注的就只有存储的问题了。在这个例子中你可以使用基于 XML 的映射描述符来实现横切关注点。&lt;/p&gt;

&lt;p&gt;领域特定的解决方案提供了一种特殊的办法来解决指定的问题。它的缺点是，开发者必须为它学习新的技术。然后由于这些解决方案都是领域特定的，它并不能直接有效地横切关注点。&lt;/p&gt;

&lt;h2 id=&#34;构架设计的窘境&#34;&gt;构架设计的窘境&lt;/h2&gt;

&lt;p&gt;好的系统架构会考眼前与未来的一些需求，从而避免打补丁式的实现。但是这有一个问题，预测未来是一件非常困难的事情。如果你没有搞清楚未来的需求，那就需要改变、或者将系统的很多地方重新实现。另外一方面，将精力聚焦在低可能性的一些需求会导致过度的设计、混乱和臃肿的系统。因此系统构架的一个困境是：应该设计到什么程度？我应该保守式的设计还是盈余式的设计。&lt;/p&gt;

&lt;p&gt;比方说，构架中是否应该追念一个初始化时并不需要的日志系统？如果是，日志打点的地方应该在哪里，什么样的信息应该被记录？这个是一个类似的出现在优化相关需求过程中的困境—我们很少提前知道瓶颈，常归的做法是构建一个系统，对其进行分析，并通过优化进行改进以提高性能。这种方法会潜在引导我们根据分析结果去修改系统很多部分。过不了多久，一个新的瓶颈又会出现，而这个瓶颈很可能就是上一步的改进引起的。设计可复用库架构的任务会变得非常困难，因为找到库的所有的使用场景并非易事。&lt;/p&gt;

&lt;p&gt;总之，架构师很少知道系统所有可能需要解决的问题。即使提前了解了需求，一个实现的具体细节可能并没有被考虑到。因此，架构师面临着究竟应该保守设计还是盈余设计的困境。&lt;/p&gt;

&lt;h2 id=&#34;aop-的基本概念&#34;&gt;AOP 的基本概念&lt;/h2&gt;

&lt;p&gt;到这里我们主要讨论了模块化的横切关注点会有很大益处。研究人员已经研究了在「关注点分离」这一更为泛化的主题下完成该任务的各种方法。 AOP 就是这样的一种方法。AOP 力争将关注点彻底分离，以克服上述问题。&lt;/p&gt;

&lt;p&gt;AOP 的核心在于，以松散耦合的方式让你实现一个独立的关注点，然后结合这些实现成为一个最终的系统。确实，AOP 使用松散耦合、模块化的&lt;strong&gt;分离关注点&lt;/strong&gt;的方式来创建系统。相反，OOP，则使用松散耦合、模块化的实现&lt;strong&gt;共同关注点&lt;/strong&gt;方式来创建系统。AOP 中模块化的单位叫做*横切面*（aspect），好比 OOP 中共同的关注点是*类*（class）。&lt;/p&gt;

&lt;p&gt;AOP涉及三个不同的开发步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;切面分解&lt;/strong&gt;：将需求分解并识别出横切关注点与共同关注点。你可以将系统级别的关注点与模块级别关注点分离。比如说，上面提到的信用卡模块，你需要识别三种关注点：信用卡核心流程，日志和授权。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;关注点实现&lt;/strong&gt;：分离的实现各个关注点。像上面的例子一样，你可以单独实现核心流程、日志和授权三个单元。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;切面重组&lt;/strong&gt;：在这个步骤中，切面集成器通过创建模块化单元来指定重组规则 — 切面。重组过程（也称为&lt;strong&gt;编织&lt;/strong&gt;或集成）使用此信息来组合成最终系统。比如上面的信用卡例子，你得使用一种 AOP 实现的*语言*具体/规范化操作中哪一步需要打日志。还得指定每个操作在被前都需要清除授权。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/07/06/5d207ff77b21c16740.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;AOP 实现横切关注点的方法与 OOP 不一样。对于 AOP 来讲，每个关注点的实现并不会意识到其它关注点下在横切它。比如上面的信用卡例子，信用止处理模块并不知道其它的关注点是日志、授权操作。这对于 OOP 来讲意味着很大的范式转换。&lt;/p&gt;

&lt;p&gt;注意：一个 AOP 的实现可以采用其它编程方法作为它的基本方法。因此可以保证基础系统非常完善。比如说，一个 AOP 的实现可以选择 OOP 做为基础系统，这样就可以获得 OOP 共同关注点的优势。每个独立的关注点可以采用 OOP 技术识别关注点。这类似于过程式的语言可以做为许多 OOP 语言的基础语言。&lt;/p&gt;

&lt;h2 id=&#34;编织的例子&#34;&gt;编织的例子&lt;/h2&gt;

&lt;p&gt;编织器是一个将独立的关注点纺织起来的过程。换句话说，编织器根据提供给它的某些标准将不同的执行逻辑片段编织起来。&lt;/p&gt;

&lt;p&gt;为了能够演示编织过程，让我们回到之前的信用卡处理系统的例子。为了看起来更简单，我们只考虑两个操作：信用卡和借记卡。并且已经有一个合适的日志器了。&lt;/p&gt;

&lt;p&gt;考虑下面的信用卡处理模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CreditCardProcessor {
    public void debit(CreditCard card, Currency amount) 
       throws InvalidCardException, NotEnoughAmountException,
              CardExpiredException {
        // Debiting logic
    }
    
    public void credit(CreditCard card, Currency amount) 
        throws InvalidCardException {
        // Crediting logic
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样还有一个日志接口：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface Logger {
    public void log(String message);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们想要的组合需要以下编织规则，这些规则以自然语言表示（稍后将提供这些编织规则的编程语言版本）：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打印每个公共操作的开始&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打印每个公共操作完成&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;打印每个公共操作的异常&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;编织器随后将使用这些规则，并关注每个实现以产生等价于以下代码的效果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CreditCardProcessorWithLogging {
    Logger _logger;
    public void debit(CreditCard card, Money amount) 
        throws InvalidCardException, NotEnoughAmountException,
               CardExpiredException {
        _logger.log(&amp;quot;Starting CreditCardProcessor.credit(CreditCard,
Money) &amp;quot;
                    + &amp;quot;Card: &amp;quot; + card + &amp;quot; Amount: &amp;quot; + amount);
        // Debiting logic
        _logger.log(&amp;quot;Completing CreditCardProcessor.credit(CreditCard,
Money) &amp;quot;
                    + &amp;quot;Card: &amp;quot; + card + &amp;quot; Amount: &amp;quot; + amount);
    }
    
    public void credit(CreditCard card, Money amount) 
        throws InvalidCardException {
        System.out.println(&amp;quot;Debiting&amp;quot;);
        _logger.log(&amp;quot;Starting CreditCardProcessor.debit(CreditCard,
Money) &amp;quot;
                    + &amp;quot;Card: &amp;quot; + card + &amp;quot; Amount: &amp;quot; + amount);
        // Crediting logic
        _logger.log(&amp;quot;Completing CreditCardProcessor.credit(CreditCard,
Money) &amp;quot;
                    + &amp;quot;Card: &amp;quot; + card + &amp;quot; Amount: &amp;quot; + amount);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;分解-aop-语言&#34;&gt;分解 AOP 语言&lt;/h2&gt;

&lt;p&gt;就像其它编程语言方法的实现，AOP 实现包括两个部分：一种语言规范和一种实现。语言规范描述语言的构成与语法。实现则根据语言规范去论证代码的正确性，然后转换成机器码然后执行。在这小节中，我将解释 AOP 语言的不同组成部分。&lt;/p&gt;

&lt;h4 id=&#34;aop-语言的规范&#34;&gt;AOP 语言的规范&lt;/h4&gt;

&lt;p&gt;在一个高层次上，AOP 语言有两种组件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;关注点的实现&lt;/strong&gt;：创建一个独立的需求与代码之间的对应关系，这样编译器才能翻译成可执行代码。由于关注点的实现需要通过具体的过程，你可以使用传统的语言，比如 C，C++ 或者 Java&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;编织规则的规范&lt;/strong&gt;：如何将独立的关注点实现结合成最终的系统。为了达到这个目标，实现需要使用或者创建一种语言来具体说明结合的规则。具体化编织规则的语言可以是实现语言的一种扩展，或者其它完全不同的东西。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;aop-语言的实现&#34;&gt;AOP 语言的实现&lt;/h4&gt;

&lt;p&gt;AOP 语言编译器有以下两个逻辑步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;结合独立的关注点&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;转换最终结果成可执行代码&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;AOP 语言实现编织器的方法有很多，包括源码到源码的翻译。你可以预处理独立切面的源码，然后将它加工成编织过的源码。然后 AOP 编译器将这些源码转交给基本语言编译器用来生成最终可执行代码，最后让 Java 编译器把代码编译成子节码。同样的，编织过程可以是子节码级别的；毕竟，子节码也是一种源代码。引外底层系统—VM虚拟机，是可以感知到切面的。使用这种基于 Java 的 AOP 实现，比如，VM虚拟机将首先加载编织规则，然后将这些规则应用到随后加载的类中。换句话说，它表现得像是 JIT 化的切面编织。&lt;/p&gt;

&lt;h2 id=&#34;aop-的益处&#34;&gt;AOP 的益处&lt;/h2&gt;

&lt;p&gt;AOP 有助于克服由代码纠缠和代码分散引起的上述问题。以下是 AOP 提供的其他优势：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;模块化地横切关注点&lt;/strong&gt;：AOP 使得每个独立的关注点有最小化的耦合，最终产出模块化的实现。这样的一种实现会产生很少的重复代码。由于每个关注点的实现是分离的，也将减少无用代码，更重要的模块化的实现让最终系统更易于理解与维护。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;更便于系统迭代&lt;/strong&gt;：由于切面模块对于横切关注点是无感知的，添加新功能、新切面将变得简单。而且当你在系统中添加新模块时，现有的切面将横切它们，这有助于你构建一系列连贯的迭代演进。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;延迟设计目标的绑定&lt;/strong&gt;：回顾下架构师的困境，有了 AOP，架构师对于将来的需求就可以推迟做出设计上的决定，因为他可以用分离的切面来实现。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;更高的代码复用性&lt;/strong&gt;：由于 AOP 分离的实现每个切面，每个独立模块之间的耦合更加的松散。比如说，你可以使用不同的日志器来记录你模块与数据库的操作。通常来讲，松散耦合的实现是代码高复用性的关键点。 AOP 的实现比 OOP 的实现更加松散耦合。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;aspectj-一种-java-的-aop-实现&#34;&gt;AspectJ：一种 Java 的 AOP 实现&lt;/h2&gt;

&lt;p&gt;略&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>选择太多所以迷失方向</title>
      <link>https://keelii.com/2019/03/24/choice-leads-lose/</link>
      <pubDate>Sun, 24 Mar 2019 19:20:04 -0700</pubDate>
      
      <guid>https://keelii.com/2019/03/24/choice-leads-lose/</guid>
      <description>&lt;p&gt;前几天无意在微博上看见了《流浪汉沈巍自述》一文，此文来自一个上海的流浪汉语录。&lt;/p&gt;

&lt;p&gt;不同的是他并不是为了生计而流浪捡破烂，沈巍从小喜欢捡破烂，捡完破烂换了钱买书看。家庭环境不理解更不支持，到了社会上，他本来可以按大多数人眼中的 &lt;strong&gt;正常&lt;/strong&gt; 人一样工作，一辈子当公务员。&lt;/p&gt;

&lt;p&gt;但是他还是改不了自己捡破烂的习惯，这样以来单位也容不下他。想法完全不与主流融合，只能被流浪。可以即便是这样，在看它的文字里，你仍然能感受到字里行间都散发着对生活的无限向往，对信念的追求，以及对残酷现实的一丝温柔。&lt;/p&gt;

&lt;p&gt;有人说故事分两种：一种开始就讲给你最美好的东西，最完美无缺的事物，人性最善良的部分。后来慢慢的什么都变了，以前那些看似美好的东西都有了瑕疵，人性也没能经得住时间的考验，所有的认识都支离破碎；还有一种一开始就告诉你最丑恶的东西，最让人恶心、难受的事物，人性最黑暗的一面。后来慢慢的也似乎变了，不经意的发现好像还有那么一丝光明的东西，一点点能让人感动的事情。&lt;/p&gt;

&lt;p&gt;前一种更像是从教科书到现实的一种过程，可能很多人慢慢的都受不了这种落差，逐渐没有了精神支柱，厌恶了生活。后一种则看似悲观、反面，实则能激发出人们本能善良的一面。&lt;/p&gt;

&lt;p&gt;这让我想起了一句话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;人不是活一辈子，不是活几年几月几天，而是活那么几个瞬间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于沈巍来说，社会和家庭给他的都是排斥、否认和异样的眼光。但是可能他就只能从书中找到了那么一丝光明，一些让自己感动的瞬间吧。&lt;/p&gt;

&lt;p&gt;我们可以反思下我们的现实生活。现实中我们总是说「自己没有选择，我不得不这样、没有退路…」。但事实上真的是这样吗？或许正是因为我们拥有的太多才让自己没法选择。&lt;/p&gt;

&lt;p&gt;人是很奇怪的，当你某天没有加班，工作完成后早早回家后突然发现居然还有很多时间可以安排。这时候你会想做很多事情：玩手机、睡觉、好好做顿饭、看部电影…&lt;/p&gt;

&lt;p&gt;但当你真正的面临很多种选择时，自己会去权衡。可能自己精神上很需要放松一下，需要娱乐一下。但是理智又告诉你应该做一些「有意义」的事情。最终可能一件事都没做好。&lt;/p&gt;

&lt;p&gt;这时候其实你需要用 &lt;strong&gt;肉体操纵精神&lt;/strong&gt;，不要想，先去做。因为实际上当你持续专注的做一件事情的时候，精神上会特别放松，你不需要再考虑那么多的选择，只需要 *像机器* 一样去做好一件事情。&lt;/p&gt;

&lt;p&gt;人总是可以通过做事情来让自己的 &lt;strong&gt;内心变的安稳&lt;/strong&gt;。我曾经无意中听到两人女生聊天，其中一个女生说&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我特别喜欢洗衣服，因为当我特别专注的把衣服洗干净的时候，那种感觉特别安静，虽然需要你耗费一些体力，但是洗完后你的内心会有一种解脱，一种如释重负的感觉…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我听到这段聊天的时候是特别惊讶的，原话特别有感染力。后来我发现了这种感觉就像是我平常写代码一样，一写起代码，就很专注，似乎能忘记时间。当你解决了一个问题，完成了一个功能模块的时候长呼一口吸、伸个懒腰，瞬间感觉特别满足。即使回到现实中你还得面临很多复杂的事情，但在这一时刻你是自由的。&lt;/p&gt;

&lt;p&gt;后来我也理解了那句 Nike 经典广告语「Just do it」的深刻涵义，当然这和我选择做 IT 行业是两码事。&lt;/p&gt;

&lt;p&gt;图：&lt;a href=&#34;https://www.pexels.com/photo/abstract-bright-color-dark-397998/&#34;&gt;https://www.pexels.com/photo/abstract-bright-color-dark-397998/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>理解比平等更重要</title>
      <link>https://keelii.com/2019/01/06/empathy-is-better-than-equality/</link>
      <pubDate>Sun, 06 Jan 2019 19:29:27 +0000</pubDate>
      
      <guid>https://keelii.com/2019/01/06/empathy-is-better-than-equality/</guid>
      <description>&lt;p&gt;很早以前就想聊聊这个话题，但是一直没机会。昨天看完电影《无名之辈》后让我心里突然有了一点感想。这便记录下来&lt;/p&gt;

&lt;p&gt;这部片子的剧情围绕着几小人物之间展开。一心想做协警的保安、一辈子想出人头地的劫匪、一个遭遇了车祸身体瘫痪的女孩、一心只想赚钱娶媳妇过日子普通男人…&lt;/p&gt;

&lt;p&gt;这些角色在我们现实生活中实在是太普通了，而且都处在社会底层。每个人对背负着生活压力，每人个都过着悬崖勒马日子。为了生存和仅有的那点「并不远大的」理想坚持前行&lt;/p&gt;

&lt;p&gt;中间那段胡广生痛骂电视台恶搞他们抢劫的桥段，让我感触很深。电视上那些转微博、发视频娱乐的网友不就是我们自己么，我们经常在网站上看到一些匪夷所思的新闻：一个没有智商的劫匪，拿上一杆枪，跑到手机店里面去抢手机。抢完了才发现是手机模型。这个事情在普通人看来真的是荒诞极了，简直是搞笑，大家都来消费这种新闻。却没有人真的去思考劫匪为什么会做这么愚蠢的事情&lt;/p&gt;

&lt;p&gt;谁知道这个愚蠢的劫匪是一个没见过大世面的农村小伙，不识字，也没什么文化；一心想进城干大事，胸中充满了对生活的渴望。可是谁又知道他进城后遭受了些什么、被多少人排斥、鄙视。现实中处处碰壁，梦想被别人看的一文不值。这种落差感长久积存在心里，有一天终于爆发了，他开始报复社会，打架、抢劫&lt;/p&gt;

&lt;p&gt;胡广生在电视上看见网友的恶搞时情绪完全崩溃，他撕心裂肺的哭着骂到：「老子要是犯法、你抓老子啊，关老子，你枪毙老子，老子认帐啊，为啥要恶搞老子、侮辱老子」&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;他是多么强大，强大到不怕犯法被枪毙；他又多么可怜，可怜没人尊重他，没人理解他&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;我们总是在网络上看到很多人在讲平等。各种阶层，各种角色&lt;/p&gt;

&lt;p&gt;员工与老板的平等、父母和子女的平等、老师与学生的平等、女人和男人的平等、穷人与富人的平等。归结起来只有一种：&lt;strong&gt;强势者和弱势者的平等&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但是实际上强势者强的本质是与生俱来的：老板有权利的优势、父母/老师有地位的优势、男人有生理的优势、富人有家族的优势&lt;/p&gt;

&lt;p&gt;在这些角色之间要求平等是一件很「无理」的事情。举个简单的例子，人都是动物，都有动物的本性，一个高个子的人站在矮个子的人旁边，根本不用讲话，高个子的人会有一种原始的身体上的气势压迫感，矮个子的人会有原始的一种害怕与自我防卫的反应。当然人类是高级动物，人类可以通过语言、眼神的沟通来降低这种差异感。但是本质上讲这两种人的「不平等」是改变不了的，尤其是高个子的人，即使你有很好的修养、很高的受教育程度，这种与生俱来的东西也是没办法完全抹去的。事实上这两个人是没法平等的，你总不能要求别人和你长得一样高吧&lt;/p&gt;

&lt;p&gt;为什么现在很多人要求所谓平等。是因为「平等」这个词可以「量化」。你有的东西我也必须有，你能做的事情我也可以做。这种感觉就像是我们开发了一个复杂的系统，我们需要有一个能实时检测到异常的监控系统，因为监控系统可以量化一个系统的好坏，可以给出一个简单的评价标准。但是监控并不能解决系统本身的好坏问题。与其花费大量精力在监控上面，不如多花时间来了解系统的核心逻辑，各个个部件之间的关系。这样的话即使系统出了问题也是在可预测范围内，监控也只是锦上添花的一个部件&lt;/p&gt;

&lt;p&gt;回到主题上，那么为什么理解或者说*同理心*更重要呢。&lt;/p&gt;

&lt;p&gt;这要从人的情感说起，其实人类是一种非常奇怪的生物，个体之间的差异让你很难理解对方的一些情绪变化。很多人都觉得很了解自己（我也是），实际上并不是的。我就有个非常困扰自己的问题，每当我唱歌非常投入的时候，唱到那么两句伤感的歌词时七窍都会有反应，我自己有的时候也在想，实际上我唱的歌词可能和我境遇半毛钱关系都没有，怎么会有这种反应呢。后来慢慢的我就理解了，因为人和人是不一样的，我们彼此有不同的年龄、性别、生活经历，同时在情感方面人又非常的奇怪，可能有的人会因为一句诗词而哭泣，可能有人会因为一段音乐而哭泣，有的人会因为一张泛黄的照片而哭泣，不同的人有不同的感受周围世界的能力，你通过视觉，别人通过听觉嗅觉。同时这些东西被记忆在大脑内的时候是立体的，全方位的。可能就是某个动作触发到了深藏在大脑中的一幅画面，瞬间你就会想起当时的天气，人物、气氛等，然后立马产生了真情的流露。从这一点来看人的大脑比起计算机简直高得不知道到哪里去了&lt;/p&gt;

&lt;p&gt;以前我老看见电视上很多追星族，在演唱会上痛哭流涕，激动不已。我就很难理解，怎么会有这种人呢，真的是歌手唱的好听吗？可是一首歌又能有多好听呢。然后上大学时听了很多的摇滚乐，当时的状态就是：*我觉得年轻时不喜欢摇滚乐是有病吧*。到现在为止我也没去听过场摇滚演唱会，但是我可以想像到如果我去了，绝对也是和大部分人一样的那种摇头晃脑，疯狂呐喊，兴奋不已的状态。&lt;/p&gt;

&lt;p&gt;所以说，看到一些匪夷所思的事情的时候不要急于去评价，或者下结论。试着去理解一下对方的境遇，万一自已经说错话了那也不要紧，承认自己的错误其实并没有那么困难，可能在你看来很简单的一句话就会让对方感受到整个世界的温柔&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img14.360buyimg.com/devfe/jfs/t1/15866/25/4364/88758/5c31d782Ed9a2fc0a/4efb1466c3229758.jpg&#34; alt=&#34;empathy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;图：&lt;a href=&#34;https://www.pexels.com/photo/photography-of-body-of-water-and-mountains-1544880/&#34;&gt;https://www.pexels.com/photo/photography-of-body-of-water-and-mountains-1544880/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>名不正则言不顺，是这样的吗？</title>
      <link>https://keelii.com/2019/01/01/political-correctness-then-freedom-of-speech/</link>
      <pubDate>Tue, 01 Jan 2019 19:29:27 +0000</pubDate>
      
      <guid>https://keelii.com/2019/01/01/political-correctness-then-freedom-of-speech/</guid>
      <description>&lt;p&gt;名正言顺这个成语大家都知道，尤其在一些政治典故中经常被提及。今天就来聊聊这个话题&lt;/p&gt;

&lt;p&gt;名正言顺的梗概出自于《论语·子路》中孔子和子路的一段对话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;子路曰：“卫君待子而为政，子将奚先？”&lt;/p&gt;

&lt;p&gt;子曰：“必也正名乎！”&lt;/p&gt;

&lt;p&gt;子路曰：“有是哉，子之迂也！奚其正？”&lt;/p&gt;

&lt;p&gt;子曰：“野哉由也！君子于其所不知，盖阙如也。&lt;strong&gt;名不正，则言不顺；言不顺，则事不成；事不成，则礼乐不兴；礼乐不兴，则刑罚不中；刑罚不中，则民无所措手足&lt;/strong&gt;。故君子名之必可言也，言之必可行也。君子于其言，无所苟而已矣。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大概意思是说：&lt;/p&gt;

&lt;p&gt;子路问孔子：“如果让你去卫国执政，你首先会做什么？”&lt;/p&gt;

&lt;p&gt;孔子说：“一定要先找对名份！”&lt;/p&gt;

&lt;p&gt;子路说：“是这样的吗？，你也太迂腐了吧，名份有什么用？”&lt;/p&gt;

&lt;p&gt;孔子说：“你太粗野了！君子对于不懂的事情，一般都采取保留意见。名分不正当，说话就不合理；说话不合理，事情就办不成。事情办不成，法律就不能深入人心；法律不能深入人心，刑罚就不会公正；刑罚不公正，老百姓就会手足无措…”&lt;/p&gt;

&lt;p&gt;正名的「名」就是名份的「名」。是古代官场政治制度下的一种阶级角色感，也是儒家思想核心部分 &lt;strong&gt;礼&lt;/strong&gt; 的角色感。如：君臣、父子、兄弟，各个角色应该做什么事情才是正确的，被提倡的&lt;/p&gt;

&lt;p&gt;比如说《八佾》中开篇第一段：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;孔子谓季氏：“八佾舞于庭，是可忍也，孰不可忍也？”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;意思是说这个季氏用天子的舞蹈阵容在自己家里开 Party。「佾yì」就是舞蹈队伍中的列，天子八列、诸侯六列、大夫四列、士二列，每佾八人。孔子要从政得先正名，正名就要先把礼放在第一位，没有礼的话就会成为君不君、臣不臣、父不父、子不子的状态，这种「八佾舞于庭」的行为在孔子看来就是大逆不道，绝不能忍的事情&lt;/p&gt;

&lt;p&gt;再如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;定公问：“君使臣，臣事君，如之何？”孔子对曰：“君使臣以礼，臣事君以忠。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;意思是 定公问孔子：“上级怎样对待下级？下级怎样对待上级？”孔子答：“上级尊重下级，下级忠于上级。”&lt;/p&gt;

&lt;p&gt;其实古文是非常精炼的，有的句子我们根本不需要全部搞懂是什么意思，只看几个字眼儿就明白了，比如上面的：君 &lt;strong&gt;使&lt;/strong&gt; shǐ 臣，臣 &lt;strong&gt;事&lt;/strong&gt; shì 君。*使* 就是驱使、使唤；*事* 就是为人做事、服侍的意思。我觉得这句话问之前就有了定位，根本不需要再回答&lt;/p&gt;

&lt;p&gt;封建社会，人们对于名份的认同感处处可见。春秋时期的尊王攘夷，三国时期曹操奉天子以令不臣，刘备打江山也要号称汉景帝阁下玄孙，这些都是政治场上的所谓的正名&lt;/p&gt;

&lt;p&gt;当这种思想蔓延到整个现代社会甚至是家庭里面的时候就更值得思考了&lt;/p&gt;

&lt;p&gt;儒家思想中关于礼的部分我更倾向于认同它的角色感，这一点是古今通用的。现实生活中我们经常会有一种感觉：同样是一句话从某些人口中说出来就很合情合理，从另外一些人口中说出来则让人很难理解甚至气愤。就是因为中国人讲话是非常讲究角色和场合的&lt;/p&gt;

&lt;p&gt;比如说：我（男的）看见一对男女聊天儿，谈到关于生活、工作的话题时，如果这个女的说：男人的一生很不容易，因为他们的一生都注定了要竞争，为钱、为权为了家人过得更好，他们们身上背负着很重的担子。&lt;/p&gt;

&lt;p&gt;当我做为一个男的听到这段话的时候会觉得这话说的很好听，让人很舒服，同时也非常佩服女的身上的那种同理心。但如果这段话是从这个男的口中说出来的我只会觉得这男的矫情娘娘腔，甚至我会找很多理由来推翻他的观点&lt;/p&gt;

&lt;p&gt;在男权社会下女人本来就是弱视的，社会能给予她们的不论是精神上的还是物质上的回报都没有男性多，相反男性天生就获得了更多的优待和资源，所以男性理应肩负更多的责任。事实上女性的一生更不容易，大部分的女性的一生会受到社会舆论家庭伦理方面的影响，以至于她们很少有自己的事业，健立家庭以后通常还有更多身体和精神上的付出，这使得她们几乎没机会做自己想做的事情&lt;/p&gt;

&lt;p&gt;所以说这个角色非常重要，但问题是当你定义了自己是什么样的角色时，再去看问题，其实本来就是不客观的。最终可能会形成一种非黑即白的观点偏见&lt;/p&gt;

&lt;p&gt;当我们今天再去回顾名正言顺的典故时，会发现即就是当下社会，大家还是有很多古时候遗留下来的碎片化的认识，这种认识会让人只相信权威的或者大众的观点，这种所谓名份上正确的角色传达出来的观点&lt;/p&gt;

&lt;p&gt;社会上的名流、功成名就的人说出来的话就是可信的，匹夫布衣甚至都没有说话的权利。所以说名正言顺真的就是正确的吗？难道只有先正其名然后才能有话语权？就算是个小人物，他也有自己的人生境遇，也有喜怒哀乐。只要人家说话有理有据，那就理当受到尊重&lt;/p&gt;

&lt;p&gt;名正言顺事实上讲的是一种政治上的正确，在国外也有很多这方面的讨论，比如说：Code of conduct，它就给出了一系列的准则，诸如人与人之间基本尊重、宗教、人种、道义方面的一些准则。这些准则在大多数人眼里是正确的，但是应不应该强加到其它不认同这个准则的人身上呢，或者说人们可不可以对里面的一些准则进行反驳&lt;/p&gt;

&lt;p&gt;《鸦片战争》大家都知道，船坚炮利的英帝国都打到天津港口了，道光皇帝还是那种处理边疆叛乱，攘除蛮夷的态度，整个大众的的意识形态还停留在天下都是天子的，天朝之外全是名份不正确的蛮族夷地，皇帝发诏告还是「奉天承运皇帝诏曰」的口气。真正枪炮打到脸上的时候才意识到疼&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为什么前端工程师需要关注设计</title>
      <link>https://keelii.com/2018/12/02/why-frontend-dev-should-care-design/</link>
      <pubDate>Sun, 02 Dec 2018 19:10:24 +0000</pubDate>
      
      <guid>https://keelii.com/2018/12/02/why-frontend-dev-should-care-design/</guid>
      <description>

&lt;p&gt;在很久之前我就说过同样的话，表达过我觉得做为前端工程师而言设计素养的重要性，今天我想聊天为什么我有这种观点&lt;/p&gt;

&lt;h2 id=&#34;泛化的设计&#34;&gt;泛化的设计&lt;/h2&gt;

&lt;p&gt;实际上生活中设计是中无处不在的，大到建筑工程、工业设计，小到网页设计、产品设计。我认为设计的本质就是 &lt;strong&gt;理解你（或者你的用户）内心想法的一个过程&lt;/strong&gt;，在完成了一个物件的物理功能后，你需要考虑它的适用场景及多数用户的实用需求&lt;/p&gt;

&lt;p&gt;我在北京呆了很多年，你要问我对北京的印象是什么颜色，我会毫不犹豫的告诉你「蓝色」。有的人会认为是雾霾的灰色、有的人会认为是天安门的红色。为什么我的印象是蓝色呢，因为在北京无论你去哪儿都会选择公共交通，所有的交通标识牌都是蓝背景加白前景色，环路上的路标、地铁标、普通道路的路标，到处都会有蓝色的标识牌。使用蓝色的好处在于 &lt;strong&gt;标识性强&lt;/strong&gt;，尤其对我这种视觉异常的人特别友好。但是却缺乏美感，因为要照顾大多数人的体验&lt;/p&gt;

&lt;p&gt;我也常去西安，你要问我对西安的印象是什么颜色，我也会告诉你是「暗红」。西安的地铁标识牌就是这种暗红，我也不太确定这种颜色准确的叫法，赤红或者朱红？总之这种颜色和西安这个城市的调性很搭。无论是古城门上的各种架梁、门柱、瓦石的着色，还是现代的地铁标识颜色，到处都有暗红色的设计。西安地铁标的设计虽然说是和整个城市的气质具有一致性，但是 &lt;strong&gt;识别性很差&lt;/strong&gt;，尤其城市里面绿化比较好，树木多的时候绿色和这种红色标识交错在一起是很难分辨的&lt;/p&gt;

&lt;p&gt;从这个例子中我们可以了解到，其实设计并不是那种只存在于理论或者艺术世界里面的东西，大多数的设计都源于生活。都表达了人们对于生活的思考与理解&lt;/p&gt;

&lt;h2 id=&#34;狭义的设计&#34;&gt;狭义的设计&lt;/h2&gt;

&lt;p&gt;狭义点讲前端工程师（程序员）们的日常是程序设计或者软件设计。有一个关于用户体验的真相是：大多数用户当他们不喜欢你的产品时，他们会 &lt;strong&gt;直接离开并放弃&lt;/strong&gt;。用户的选择是正向的，他会因为你的软件好用选择，但 &lt;strong&gt;并不一定&lt;/strong&gt; 会因为你的软件不好而批评反馈。所以我一直认为很多所谓的为了提高用户体验的调查问卷并没有什么作用。相反的很多反馈都是没有经过深思熟虑，或者是很个人的需求，这反倒会影我们的判断&lt;/p&gt;

&lt;p&gt;所以说代码设计的的好不好，交互是否流畅，体验是否极致。这个门槛的最后一步就在前端&lt;/p&gt;

&lt;p&gt;当然后端也很重要，后端的重要性是我们在这聊设计聊体验的前提。「仓廪实而知礼节」，很多前端在知乎提问类似「Node.JS 和 Java 相比…」的话题的时候却从来没想过这个问题，不过这个话题就不细聊了&lt;/p&gt;

&lt;p&gt;前端需要关注设计，原因有二：&lt;/p&gt;

&lt;p&gt;一、离用户更近。这个毫无疑问，前端在整个软件的系统栈里面是最顶部一个元素，他们写出来的代码第一用户是自己，一个功能好不好用前端会有第一知觉。同时这个也依赖于工程师对于设计体验的素养。很多东西是没法区分 &lt;strong&gt;逻辑上的好坏&lt;/strong&gt;，同时有些东西应该是 &lt;strong&gt;不言而喻&lt;/strong&gt; 的：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;页面的链接到底应该在当前面页打开还是新页签&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这就是一个典型的没法从逻辑上区分好坏的问题。当然所有页面都新窗口打开肯定是不对的。我认为 &lt;code&gt;&amp;lt;base target=&amp;quot;_blank&amp;quot;/&amp;gt;&lt;/code&gt; 在任何时时候都不应该被使用。看看自己每天使用的浏览器 tab 页的个数就明白了。实际使用的时候要根据用户的场景、喜好、链接去向内容、技术实现等各方面因素综合考虑，*一刀切* 的做法绝对是错误的&lt;/p&gt;

&lt;p&gt;&lt;em&gt;弹出层、hover 提示 应该是尽量少的使用&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这就是不言而喻的，因为在 PC 端用户的鼠标是最常用的输入设备。鼠标的 &lt;code&gt;mouseover&lt;/code&gt; 事件会产生很多误操作，浮层的显示这会骚扰用户的视觉。当然技术上我们可以通给 &lt;code&gt;mouseover&lt;/code&gt; 事件添加延迟的方式来避免误操作的机率，但是我认为这是一种 *打补丁* 的解决方法，因为当一个提示信息足够重要的时候，任何延迟都是错误的，更何况打补丁还有副作用&lt;/p&gt;

&lt;p&gt;最近刚好发现一个笔记类应用「www.notion.so」，初次使用的时候感觉真的非常棒。设计精美、交互流畅、动画细腻，好的产品不就应该是这样的么&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img12.360buyimg.com/devfe/jfs/t29341/339/962472864/379822/48eff2bb/5c03552aN432640ea.png&#34; alt=&#34;motion.so-optmz&#34; /&gt;&lt;/p&gt;

&lt;p&gt;但是当你深入使用的时候你会发现这个页面上充满了各个的 hover 效果，提示信息、状态切换等。它几乎在所有的图标上都加了 功能提示或快捷键的 hover 提示，这个在我看来就非常的骚扰用户。就比如左侧菜单的收起按钮使用了左箭头的图标「＜」，这种图标就是不言而喻的，不需要再用 tooltip 来提示&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img13.360buyimg.com/devfe/jfs/t30091/247/977323550/330695/a320c333/5c03914aNcce71c64.gif&#34; alt=&#34;hovers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;二、审美需求。这一点其实上是所有人都需要关注的，很多程序员在使用 macOS 一段时间后就再也没法忍受 windows 的界面了。单从审美诉求这一项讲，macOS 体现出来的简洁、专注是 windows 系统没有的。结合上面的问题可以思考下：*为什么 macOS 系统的鼠标 hover 的交互很少？*我觉得应该是操作系统给用户带来的那种稳定、可靠的感觉。当你专注的做一件事情的时候最好不要有任何形式的打扰，像系统通知、气泡提醒什么的应该完全被禁止&lt;/p&gt;

&lt;p&gt;很多人会认为程序员不需要审美，因为他们实现功能就行了。事实上甚至很多程序员也可能是这么想的。但是他们并没有意识到一点，即使是那种特别不关心审美的人也有基本审美的需求，或者说一个长像其丑无比的人也有基本审美的需求，爱美之心人皆有之。只是程序员这类群体写代码太久就会进入特别专注的状态，只在乎代码，忘了其它一些同样有价值的东西&lt;/p&gt;

&lt;p&gt;我想表达的意思并不是说这样不好，而是我认为在专注技术的前提下了解一些设计方面的东西会让我们理解别人（用户）的想法，这其实也是一种与外界的沟通形式，也能弥补程序员天生的弱点&lt;/p&gt;

&lt;h2 id=&#34;设计的规则&#34;&gt;设计的规则&lt;/h2&gt;

&lt;p&gt;很多对设计一知半解的人会说一句别人经过实践总结出来的真理：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rules are meant to be broken — 规则就是用来被打破的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在《写给大家看的设计书》中就讲过这个问题，我是比较同意作者的观点，即：打破规则的前提应该是你足够了解规则是什么，意味着什么&lt;/p&gt;

&lt;p&gt;同时书中开篇分享了另外一个观点，我也很赞同：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当你能叫出一个东西的名字后，这个东西就无处不在了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个估计很多人都会有这种体验，某一天某个人说了一个你以前从来没听过的词儿，然后你觉得这个词很新鲜，接着在后来一段时间内这个词就会不段的出现在你的周围&lt;/p&gt;

&lt;p&gt;作者的意思是，其实就是设计在很多人眼中遙不可及并不是因为它很高深，而是你没听过、没见过一些设计规则&lt;/p&gt;

&lt;p&gt;后面的东西就不聊了，读者有兴趣可以读下原著，书中提到的几个原则至今都在我的脑海里：亲密、对齐、重复、对比&lt;/p&gt;

&lt;p&gt;&lt;em&gt;封面图：&lt;a href=&#34;https://www.pexels.com/photo/black-pencils-and-design-word-6444/&#34;&gt;https://www.pexels.com/photo/black-pencils-and-design-word-6444/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为什么一些高赞公众号文章成为现代鸦片</title>
      <link>https://keelii.com/2018/11/25/why-some-wechat-article-become-modern-opium/</link>
      <pubDate>Sun, 25 Nov 2018 19:10:24 +0000</pubDate>
      
      <guid>https://keelii.com/2018/11/25/why-some-wechat-article-become-modern-opium/</guid>
      <description>

&lt;p&gt;单看这篇文章的标题可能会有点言重，但是我更愿意记录下来给自己当做警钟。同时这也不是一篇聊历史的文章&lt;/p&gt;

&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;

&lt;p&gt;为什么会谈到这个话题，是因为最近新闻实在太多，无论是「金马奖台独」、「俞敏洪关于堕落的演讲」还是「D&amp;amp;G辱华」。每一次舆论的风口浪尖上总是会有一些公众号 &lt;em&gt;站出来表达立场&lt;/em&gt; ，我并不打算聊这三件事情中的任何一件，我想聊聊我对于公众号的一些反醒及看法&lt;/p&gt;

&lt;p&gt;事实上最开始公众号流行的时候，我也会跟风转发一些高赞文章。比如当年咪蒙写的《致贱人：我凭什么要帮你》。当我看完这篇文章时第一感觉就是：太解气、太过瘾了，浑身上下产生了一种从心理到生理上的一种爽快感&lt;/p&gt;

&lt;p&gt;现在想起来当时的感觉应该和吸鸦片没有什么两样，但当我回过头来再看这件事情的时候我会觉得这文章无论对于我自己还是观众来说都没有半点益处。就像文章里面提到的那种伸手党，你帮了他他还觉得理所应当的人，这种人在现实生活中总会存在，不会因为转了这篇文章而消失、更不会因为你骂他两句他就幡然醒悟。所以我觉得与其痛述现实与之争长短，不如静下心来，多看书学习，用提高自己的方式拉开与它们的距离&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;然后我也想分析下这类的文章为什么能受到很多人的追捧（*下面的分析并不针对指定公众号*）&lt;/p&gt;

&lt;h2 id=&#34;人个的情绪宣泄&#34;&gt;人个的情绪宣泄&lt;/h2&gt;

&lt;p&gt;虽然公众号名曰「公众」，但是我认为 &lt;strong&gt;个人公众号&lt;/strong&gt; 是挺私人的东西。大多数人发的内容都是和自身经历相关的，不具有事实客观性，大家都在聊自己的观点&lt;/p&gt;

&lt;p&gt;比较会写文章的那类公众号发展一段时间，会有很多粉丝，他们写的一些东西因为本质上就是私人的一些想法，写的多了总会不自觉的迎合上某些观众的心理。再加上互联网肆虐的传播途径从而行成蝴蝶效应。再后来他们会成立所谓的「xx 公司」来专门运营公众号，但是本质上并没有提高内容的质量。慢慢的公众号成了一种娱乐、八卦的媒体&lt;/p&gt;

&lt;p&gt;很多观众也不具备独立思考的能力，大家对于文章好块的判断通常是感性的，通常是某些字眼、句子触动了内心深处的某个地方。由此产生的点赞或是转发完全属于一种 &lt;strong&gt;生理反射&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;大家都会说当你被一只狗咬一口的时候你不应该咬回去，因为你是人，你会思考… — 但事实是任何人被狗咬的第一反应就是回踹他两脚或者更甚&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这就解释了我们很多时候平心静气讲道理的时候都很懂，都能说得头头是道。但真正自己处于指定条件下的时候也不免产生非理智行为，尤其是被情绪控制的时候&lt;/p&gt;

&lt;p&gt;其实再深入点，对于专业的写手来讲，他们很懂得利用大众的心态与喜好，很容易就能写出来一些据有煽动性言论。举例个不太恰当的例子，如果让我写一篇关于「D&amp;amp;G辱华」事件的文章，在尽可能获取更高点赞的前提下我完全可以把这篇文章写得非常有煽动性，让多数人看了捶胸顿足、拍案叫绝。但是我不会，因为相对于做好事来讲，做坏事简直太简单了，没什么技术含量&lt;/p&gt;

&lt;p&gt;所以我认为一些公众号及其观众大多数都是在宣泄私人的情绪，没有什么正常的逻辑推理，更没有什么值得思考的东西&lt;/p&gt;

&lt;h2 id=&#34;政治正确&#34;&gt;政治正确&lt;/h2&gt;

&lt;p&gt;接着上面的蝴蝶效应讲。其实上面的现象并不是最可怕，最让人无解的是当蝴蝶效应延伸到大多数人的脑子里面时，整个事情就完全变味儿了。人们会上升到政治正确、非主流、异教徒的观念&lt;/p&gt;

&lt;p&gt;中国人喜欢大一统，因为大一统的观点才是权威的、名正言顺的。所谓的「一家之言」反而会遭到质疑，或者说 *政治不正确*，甚至被认为是 freak，然后接着拿的两样观点做对比。结果就是「我的观点永远是伟大、光荣、正确的，你的观点就是错的、可耻的、应该被消灭的」&lt;/p&gt;

&lt;p&gt;我们去看诸葛亮的《后出师表》，开头第一句就是「先帝深虑汉、贼不两立，王业不偏安」。我就特别奇怪，为什么非要分 汉、贼 呢？可能在对方看来你才是贼，「不两立」&lt;strong&gt;在现在看来&lt;/strong&gt; 就更可笑了，怎么就不能两立了，各安一方水土、各抚一方百姓 不好吗？王业不偏安，那么你的王是王，别人的王就不是王了？&lt;/p&gt;

&lt;p&gt;当然我上面讲的是在现在看来，在古代群雄逐鹿的时代不是你死就是我亡。可那是当时的实世。现如今都 21 世纪了，全世界都在讲求同存异、自由平等，为什么很多人就是接受不了新的观点与想法，接受不了异已呢&lt;/p&gt;

&lt;h2 id=&#34;情绪宣泄的必要性&#34;&gt;情绪宣泄的必要性&lt;/h2&gt;

&lt;p&gt;人类是感情动物，不是机器。有情绪就需要表达与宣泄。就我自己职业而言，属于程序员这种被认为没有感情需求的一类人。但事实是即使是程序员这类不懂沟通交流的人群，在实际生活中也需要表达，也需要沟通与被肯定。就好比大家觉得男人本质上就是动物，没有情绪一样。这是一个极其错误的观点，只是他们更喜欢把自己的感情深藏在内心罢了&lt;/p&gt;

&lt;p&gt;情绪宣泄并不是某类人的特殊需求，言论自由同样是每个人天生的权利。无论是家庭、工作还是社会中，人们总会积累到一些负面情绪，同时总会在某一角色中表现出来&lt;/p&gt;

&lt;h2 id=&#34;什么样的文章才是好的&#34;&gt;什么样的文章才是好的&lt;/h2&gt;

&lt;p&gt;我认为下面三种文章是我比较认同的：&lt;/p&gt;

&lt;p&gt;一、没有结论，只有论点和客观事实。结论交给观众，每个人自然有属于自己的判断&lt;/p&gt;

&lt;p&gt;二、有论点、有结论，并且结论根据客观事实逻辑出来。这类文章即使结论有感情色彩，对观众来讲也会产生好的引导、或者说观众也能自我判断&lt;/p&gt;

&lt;p&gt;三、看完后能让人反省思考。我认为单纯的读书、学习只能提高自己的知识水平，并不能综合性的提升自我意识与自我修养（学而不思则罔，思而不学则殆），只有不断的反省思考才能让人健全&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后分享一段讨论传统文化是否阻碍科技发展的视频：&lt;/p&gt;

&lt;p&gt;关注微信公众号「肆零玖陆」查看视频&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我们的文化传统是不提倡怀疑、不提倡批判、不提倡分析、不提倡实证，哪来的科学，哪儿来的科学精神&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;封面图：&lt;a href=&#34;https://www.pexels.com/photo/blur-capsule-close-close-up-209495/&#34;&gt;https://www.pexels.com/photo/blur-capsule-close-close-up-209495/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>国内外购物网站的差异</title>
      <link>https://keelii.com/2018/11/17/differences-between-cn-and-us-of-online-shopping-site/</link>
      <pubDate>Sat, 17 Nov 2018 19:10:24 +0000</pubDate>
      
      <guid>https://keelii.com/2018/11/17/differences-between-cn-and-us-of-online-shopping-site/</guid>
      <description>

&lt;p&gt;最近由于工作内容需要特地了解了一下国外在线购物网站的一些特点，过程中发现一些比较有意思的地方，记录下来同时聊聊我的感受&lt;/p&gt;

&lt;p&gt;我很少上国外购物网站买东西。毕竟做为个人来讲跨境消费是非常不方便的。但是我会通过信用卡购买一些服务类的产品，像虚拟服务器、域名、正版软件等。大概算是有一点国外网站的消费经历&lt;/p&gt;

&lt;p&gt;我研究了美国 TOP 10 的线上购物网站，类型上大概分三种：&lt;/p&gt;

&lt;h2 id=&#34;综合类&#34;&gt;综合类&lt;/h2&gt;

&lt;p&gt;像 Amazon, Ebay 这种属于综合类的线上购物网站，大部分的人会上这样的网站购物，因为商品种类齐全，覆盖面广。而且这类网站通常都是电商的先驱，用户早就行成了消费习惯。所以它们能占市场的很大份额&lt;/p&gt;

&lt;h2 id=&#34;垂直类&#34;&gt;垂直类&lt;/h2&gt;

&lt;p&gt;一般是某个特定商品分类领域，或者比较小众的网站。例如：Newegg - 消费电子、Esty - 手工艺、Sears - 工具/器具、ModCloth - 非主流女装、Rockler - 木工五金。这类网站的特点就是目标用户比较小众，网站的设计风格也非常个性化。newegg 是数码极客风，Esty 是小清新路线，Sears 是实用主义，ModCloth 是潮流与时尚，Rockler 是匠人。每个网站都有它特定的气质。Rockler 比较有代表性，在国内很难想像有买五金制品的网站，在 Rockler 甚至可以买到木头原材料，估计是因为国外人工成本高，很多家庭常用的东西都是自己做，所以才存在这种小众类目购物网站&lt;/p&gt;

&lt;h2 id=&#34;渠道类&#34;&gt;渠道类&lt;/h2&gt;

&lt;p&gt;这个分类可能国人没啥概念，渠道就表示线上、线下百货零售等。Walmart(沃尔玛)、Best Buy(百思买)、Target(塔吉特)。这其中数沃尔玛最典型，沃尔玛是一家美国的跨国零售企业，一个典型的家族企业。已经连续 N年在「财富世界500强」排名第一。可以说是美国零售企业的鼻祖了。这类网站的特点就是它们的线下零售渠道非常成熟，沃尔玛全球员工就超过两百万，线上对于它们来说只是多了一种销售途径。线上的销售完全可以靠自己的品牌影响力来推广&lt;/p&gt;

&lt;p&gt;在实际体验过这些网站后，我汇总出了如下几个和国内网站有鲜明区别的地方：&lt;/p&gt;

&lt;h2 id=&#34;一-见图知意&#34;&gt;一、见图知意&lt;/h2&gt;

&lt;p&gt;国外购物网站上一个最主要的特点：图片特别大，而且图片中除了商品以外没有别的干扰元素。比如下面这个母婴类目首页的导航图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img10.360buyimg.com/devfe/jfs/t27766/157/1846789565/232488/e8057cb4/5befdb3aNb3e9b6c5.jpg&#34; alt=&#34;1-baby&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看一眼大概就能知道分别是：贴身寝具/尿不湿、儿童服饰、婴儿用的安全器具。这是一个引导页，图片上不会有具体商品信息&lt;/p&gt;

&lt;p&gt;他们的的频道页（首页、类目展示页）很少有具体的商品展示，频道页只做一个大概的分类引导，页面很短，一般就是几张简单的图片，一眼就知道这个分类卖些什么东西。如果有感兴趣的内容就点到下一个具体类目进行筛选&lt;/p&gt;

&lt;p&gt;对比国内的频道页都是以楼层的概念陈列商品列表：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;天猫：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img30.360buyimg.com/devfe/jfs/t27016/6/1877215244/218953/545e30f8/5befe09cN27258cb2.jpg&#34; alt=&#34;2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;京东：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img20.360buyimg.com/devfe/jfs/t26719/241/1900487066/122604/c6b8ecd7/5befe110Nc4bee940.jpg&#34; alt=&#34;3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可能国内用户都习惯了杂货铺的体验，大家喜欢在一堆东西里面挑选购物的感觉吧。&lt;/p&gt;

&lt;h2 id=&#34;二-目的明确&#34;&gt;二、目的明确&lt;/h2&gt;

&lt;p&gt;大部分人上购物网站的目的就是要购买某样商品，我们现在很多人网上购物本来想买 A，结果国内网站一顿干扰+瞎推荐引导买了 B 或者什么都没买，这难道不是倒行逆施么&lt;/p&gt;

&lt;p&gt;以买衣服为例，我们看看国外网站的列表页是怎么展示商品的：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Target 的女士毛衣列表&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img12.360buyimg.com/devfe/jfs/t28819/338/343314321/120843/2178ef25/5befe81fN2f2191e1.jpg&#34; alt=&#34;4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modcloth 的女士连衣裙列表&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img12.360buyimg.com/devfe/jfs/t26242/277/1886054701/161109/83518a14/5befe90fN2c5ee49b.jpg&#34; alt=&#34;5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;亚马逊的女士连衣裙列表&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img14.360buyimg.com/devfe/jfs/t30616/134/329588485/146048/60789f18/5befea0bN2c2312e8.jpg&#34; alt=&#34;6&#34; /&gt;&lt;/p&gt;

&lt;p&gt;总体上给人的感觉是列表页非常清楚、简单。一眼扫过去就能知道衣服穿上的效果。而且图片中的人物也比较素雅普通，尤其 Modcloth 网站上，不同肤色、不同形体、不同风格会让你感觉到这就是平常人穿搭效果&lt;/p&gt;

&lt;p&gt;另外我发现亚马逊比较特殊，很多模特都不会露脸。猜测可能是为了排除人物形象对商品的干扰？&lt;/p&gt;

&lt;p&gt;再看看国内网站是怎么做的：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;天猫的连衣裙列表&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img11.360buyimg.com/devfe/jfs/t26797/231/1839438911/255736/494048cd/5befedcaNd7706a3d.jpg&#34; alt=&#34;7&#34; /&gt;&lt;/p&gt;

&lt;p&gt;天猫的这个列表就明显过于突出模特的妆容和身材，根本感觉不到这件衣服的材质、面料、风格以及实际穿在身上的效果，而且一张图片里面的元素太多了，品牌 logo、背景、配饰都干扰了用户的视觉&lt;/p&gt;

&lt;p&gt;&lt;em&gt;京东的女装当季热卖&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img11.360buyimg.com/devfe/jfs/t30151/331/327872197/211139/31fb4643/5befef3cN3f72cb58.jpg&#34; alt=&#34;8&#34; /&gt;&lt;/p&gt;

&lt;p&gt;图 3 和图 5 到底买的是衣服还是包包让人无比的困惑，图 1 更离谱，到底卖是手上的配饰还是裤子还是衣服根本说不清楚&lt;/p&gt;

&lt;p&gt;大多国内网站的服装列表基本上都会在左/右上角标出来 &lt;strong&gt;品牌&lt;/strong&gt; 这个是真正的中国用户习惯，大家买东西就看品牌，衣服好不好不重要么？品牌意识在国内真的是根深蒂固。以我们上面的例子为例，我列出的是天猫和京东网站上卖的东西，很多人买完商品觉得不好的时候会觉得是天猫或者京东不好。这是一个值得思考的问题&lt;/p&gt;

&lt;p&gt;总结起来国内的衣服卖的是 &lt;em&gt;模特&lt;/em&gt; 和 *品牌*，国外衣服更注重 &lt;em&gt;穿搭效果&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-推荐少&#34;&gt;三、推荐少&lt;/h2&gt;

&lt;p&gt;国外网站上推荐相关的内容比较少，顶多会有一个 you may like 的推荐商品模块，推荐的东西比较少而且通常在不显眼的地方。其实本来就应该如此，所谓的推荐、个性化应该是建立在尊重用户原始的购买目的之上的点睛之笔。比如我买了个 iPhone 电池，网站推荐给我一个螺丝刀我就会觉得很贴心，反之就不行&lt;/p&gt;

&lt;p&gt;再比如有人攒钱买个苹果笔记本，那在一段时间内就别再给人家推荐笔记本类的商品了嘛。大多数情况这种推荐是毫无意义的。大家整天在吹人工智能、大数据推荐什么的。但是这个简单的逻辑都做不到那人工智能就变成了人工智障了吗&lt;/p&gt;

&lt;h2 id=&#34;四-支付方式&#34;&gt;四、支付方式&lt;/h2&gt;

&lt;p&gt;国外网站一般就提供两种支付方式：信用卡、PayPal。像 Apple Pay, Android Pay 什么的都是非主流。除非有对中国的业务才有可能提供支付宝这种支付方式。国内的移动端支付方式可以说是碾压性的优势，大家会觉得国外的支付方式简直就是停留在原始社会&lt;/p&gt;

&lt;h2 id=&#34;五-促销方式&#34;&gt;五、促销方式&lt;/h2&gt;

&lt;p&gt;国外的购物网站促销都比较单一，不像国内有各种的玩法。一般来说有三种：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优惠码&lt;/strong&gt; (Gift code)：通常用在一些特殊的日子，类似国内的店庆一样。优惠码在一段时间内所有用户通用，比如使用 &lt;em&gt;happy2018&lt;/em&gt; 就能获得 80% off 的优惠&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;礼品卡&lt;/strong&gt; (Gift card) ：类似于购物网站的虚拟货币。这个就有点意思了，很多外国人会直接送亲戚朋友礼品卡而不是实物。他们会认为大家的需求不一样，我给你买的东西你不一定喜欢，还不如直接送张购物卡，你爱买啥买啥，你高兴我也不发愁送啥&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;黑五大促&lt;/strong&gt; (Black friday)：黑五的促销一般都是实打实的打折甚至半价，不玩虚的，用国内的标语就是：*在黑五那天你买不到吃亏，买不了上当，明码标价，老外诚不欺我*。这不快到 2018 的黑五了，Google Pixel 3 促销第二台半价 (Buy a Pixel &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; XL, get another up to 50% off)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为什么 Youtube 广告更好看</title>
      <link>https://keelii.com/2018/11/04/why-youtube-ad-better/</link>
      <pubDate>Sun, 04 Nov 2018 19:10:24 +0000</pubDate>
      
      <guid>https://keelii.com/2018/11/04/why-youtube-ad-better/</guid>
      <description>

&lt;style&gt;
&lt;/style&gt;

&lt;p&gt;马上要到双十一大促了，无论你喜不喜欢，各种广告、短信都扑面而来。当大部分广告都在高呼打折、特价买买买的时候，大家似乎都忘记了自己想要买什么了。&lt;/p&gt;

&lt;p&gt;提到广告首先让我印象深刻的是 youtube 视频网站的广告。youtube 的广告一般大概两分钟，每次看到新广告总能让人感觉特别惊喜，同样的视频网站，国内的优酷、腾迅视频却很少让人记住。&lt;/p&gt;

&lt;p&gt;于是我做了个简单的分析，总结出来我认为 youtube 广告更棒的几个原因：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;观看 youtube 需要视频需要科学上网，没法观看的可以关注公众号 肆零玖陆 对应有文章更新&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;广告质量高&#34;&gt;广告质量高&lt;/h2&gt;

&lt;p&gt;这个是毋庸置疑的，无论大众的审美如何，人们天生喜欢看到美的东西，能传递思想形成共鸣东西。即使广告也不例外，好广告最基础的一点就是要让用户看完之后知道你传达的信息是什么，似有似无、估做深沉的广告毫无意义。&lt;/p&gt;

&lt;p&gt;如果你是个程序员并且经常上 youtube 的话，你一定会看过 Wix 这个广告。它是一个网站，使用它可以让你快速的制作属于自己的网页、博客等。我们来欣赏一下 Wix 的广告：&lt;/p&gt;

&lt;p class=&#34;video-wrap&#34;&gt;
&lt;iframe width=&#34;100%&#34; src=&#34;https://www.youtube.com/embed/Fueho8FMaZ8&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;这个广告无论从内容传达、产品特点、动感音效还是品牌效应都一应俱全，看完之后不仅印象深刻，而且即使你不怎么懂英文也知道 wix 是用来做什么的。&lt;/p&gt;

&lt;p&gt;广告一开始就开门见山告诉你：&lt;/p&gt;

&lt;p&gt;「With Wix you can create professional website that looks stunning, Just go to wix.com…」&lt;/p&gt;

&lt;p&gt;不到 4 秒的时间就把整个广告的主功能告诉你了（猜想可能是因为 youtube 广告 5 秒之后可以跳过），接着音乐节奏一变，开始演示一些常用功能，如果你是第一次看这个广告那这部分还是挺有效的「入门指引」，如果你看到过很多次这个广告，那现在你跳过去也不会错过什么，因为第一句话已经达到了效果，对于跳过的用户后面的部分自然是没有意义的。&lt;/p&gt;

&lt;p&gt;所谓的品牌效应就是看过很多次以后你脑子里面的那几个字，如果你还看过这个广告的其它版本，你就会发现有几个频繁出现的关键字「professional, stunning, website」，这就是广告想告诉用户的最重要的信息了&lt;/p&gt;

&lt;p&gt;还有类似 Grammarly 这样的广告，简洁清新的设计风格，让你一看就懂：&lt;/p&gt;

&lt;p class=&#34;video-wrap&#34;&gt;
&lt;iframe width=&#34;1382&#34; height=&#34;779&#34; src=&#34;https://www.youtube.com/embed/15NXrnyT2HM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2 id=&#34;推荐关联强&#34;&gt;推荐关联强&lt;/h2&gt;

&lt;p&gt;推荐关联性强，这一点不得不说，youtube 上的广告真的是覆盖面非常广泛，如果你经常在 youtube 上看一些编程方面的视频，它就会推荐给你很多技术相关的广告，前两天突然给我推送了一个 React Native 组件的广告，我们来欣赏下：&lt;/p&gt;

&lt;p class=&#34;video-wrap&#34;&gt;
&lt;iframe width=&#34;100%&#34; src=&#34;https://www.youtube.com/embed/g13hxWfSisY&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;这个广告相比而言更小众了，估计不是做前端的根本看不懂是个啥意儿了。其实就是他们做了一些 React Native 的商业化组件，种类多，你可以付钱直接购买使用，不用自己开发。&lt;/p&gt;

&lt;p&gt;可能是因为我经常看一些人文历史方面的视频，youtube 还推送过一些公益性质的文化传播类的广告比如这个「中文化遗产保护的合作关系」:&lt;/p&gt;

&lt;p class=&#34;video-wrap&#34;&gt;
&lt;iframe width=&#34;100%&#34; src=&#34;https://www.youtube.com/embed/0tSTRc0Rsn4&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;这让我无比惊讶。一方面在于这种细分领域而且还是我特别了解的东西居然也有商业化的广告，另一方面也感叹 youtube 的推荐确实非常准确。而且我时常感觉以前在 google 搜索上搜索关键词后，再上 youtube 居然能推给我新的相关广告。当然这种推荐有可能会影响到你的隐私，不过由于 &lt;em&gt;GDPR&lt;/em&gt; 的原因，国外的网站现在基本上都有了不记录用户操作历史的一些选择。这个对于多数人来讲都是有好处的，因为对于用户来讲他们 &lt;strong&gt;始终&lt;/strong&gt; 是有选择的。推荐这个话题很大，有时间单独写写&lt;/p&gt;

&lt;h2 id=&#34;不骚扰-有选择&#34;&gt;不骚扰，有选择&lt;/h2&gt;

&lt;p&gt;这一条对于国内用户来讲尤其重要，要知道腾迅视频不开会员每次打开都是有 40~90 秒不能跳过的广告哦，爱奇艺，稍好点的是一定时间内再看新视频就不会播广告了。而且我发现国内的视频网站广告都 &lt;strong&gt;出奇的统一&lt;/strong&gt;，要么是名牌汽车、婴儿牛奶，要么是可口可乐、肯德基汉堡。都是大家挺熟悉的东西。完全没有新鲜感。&lt;/p&gt;

&lt;p&gt;再看 youtube 的广告，说起来其实我也没搞懂 youtube 广告的展示逻辑，有的时候点进去完全没广告，有时候每次点进去都会有。但是值得一提的是 youtube 的广告不仅和你的喜好有关，而且和广告所在的视频内容也相关。比如你看一个手机的开箱视频，那广告很可能就是和手机相关的，比如摄影照像相关。如果你不喜欢 5 秒后跳过，一段时间内就不会再有广告了。虽然 youtube red 可以让你付费免去所有广告，但是对于我这种视频观看量级还是用不到的，能用到的前提也得是没有科学上网的成本。&lt;/p&gt;

&lt;h2 id=&#34;真正能产生转换的广告&#34;&gt;真正能产生转换的广告&lt;/h2&gt;

&lt;p&gt;最后再附送一条之前真正让我产生转换率的广告，也是 youtube 推荐的，起初我并不知道这是个什么东西，看完之后莫名的被吸引，然后去搜索相关资料，了解了这个品牌的一些设计理念，刚好赶上七夕，所以就顺利成章的形成了一次「冲动」购买&lt;/p&gt;

&lt;p class=&#34;video-wrap&#34;&gt;
&lt;iframe width=&#34;100%&#34; src=&#34;https://www.youtube.com/embed/PGmEERI3vTE&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>谈谈技术驱动与尊重技术</title>
      <link>https://keelii.com/2018/10/27/technology-driven-and-respect/</link>
      <pubDate>Sat, 27 Oct 2018 19:10:24 +0000</pubDate>
      
      <guid>https://keelii.com/2018/10/27/technology-driven-and-respect/</guid>
      <description>&lt;p&gt;很多从事 IT 互联网公司工作的人（尤其是程序员）会常常提到「技术驱动与技术重视」的问题，大部分人在面临职业选择的时候也优先选择那些所谓的「技术驱动」型的公司。因为在这种公司里面技术氛围好，对自己的职业发展有帮助。&lt;/p&gt;

&lt;p&gt;这种想法肯定是无可厚非的。本文试着从大环境与自我两方面聊一下这个话题&lt;/p&gt;

&lt;p&gt;*首先*。在大家聊到这个话题时往往都 &lt;em&gt;出奇一致&lt;/em&gt; 的认为国内没有技术驱动型公司。因为大众对技术的认识很少，很多人对于程序员的第一印象是「修电脑」。&lt;/p&gt;

&lt;p&gt;当然你可能会觉得「不会呀，我周围都是一些非常专业的同事，我也在一家很重视技术的公司工作，我的工作内容大家都认可」，这么认为当然也是对的，但是我想说是的大众的意识问题。&lt;/p&gt;

&lt;p&gt;为什么大家会有这种「偏见」，在我看来根本原因就是一种 &lt;strong&gt;普世的价值观对于偏才的误解&lt;/strong&gt;。因为大众喜欢看到一个十全十美的东西。儒家的思想提倡自我的实现，君子应该如何如何…，君子应该是上知天闻下知地理，既洞明学问，又练达人情。但事实上并非如此。诸葛亮就是一个很好的例子，大众认可的是他小说中的角色，一个样样精通的人，政治、军事、管理各个领域都很精通，但事实上诸葛亮除了人长得帅气，有政治才能以外并没有别的什么长处&lt;/p&gt;

&lt;p&gt;大家喜欢全才而不是偏才，这也是《论语》中讲「君子不器」的道理。就是说君子不能像固定的器具/东西一样只有一个功能。上学的时候老师会告诉你不能偏科，学校会要求你德智体美劳全面发展。这是一种美好的愿望，但是真的有几个人会成为大家眼里的完人呢。我始终认为每个人都是不一样的，与其要求成为大众一致认为的完美，不如让自己成就真实的自我。&lt;/p&gt;

&lt;p&gt;再回到现在，为什么人们开始崇尚「工匠精神」，科技发展飞速的今天，大家才意识到技术的重要性，才意识到「科学技术是第一生产力」，只有掌握了核心技术才有能力去创造更多的价值，然而任何一样好的技术，一定是经过了几代人的努力长时间的积累实践才最终产业化。我们现在社会缺乏的恰恰是这种持之以恒的精神。&lt;/p&gt;

&lt;p&gt;在我看来工匠精神就是那种对做事要求特别专业、极致，实现自我价值的同时影响别人的一类人，这类人（比如说程序员）他们在用大量的时间去学习了专业知识，但是却疏于交际、不善言谈、或者说除了专业知识其他能力很弱。如果周围的环境能给予足够的理解于支持，比如说刚刚过去的程序员节就是个很好的例子，我觉得那个时候才会出现真正的技术驱动&lt;/p&gt;

&lt;p&gt;*其次*。上面讲的都是大环境，事实上通常是无法改变的，那么程序员是不是应该自己反思下如何提升自己来获得外界的支持于尊重。很多时候大家在要一样东西时会觉得「本来就是这样」，程序员就应该被放在一个被尊重的地方，一个认可技术的公司。但是这种尊重与认可怎么可能凭空而来呢，所谓的尊重应该是通过自己的专业能力换来的。别人眼中的你也是自己塑造出来的才对。要想大家重视技术，首先自己得重视技术，能用技术做到别人做不到的事情，这才是技术的价值。如果你自己写代码不追求极致，得过且过那就必然会成为被淘汰的对象&lt;/p&gt;

&lt;p&gt;可能会有很多人认为写代码对于自己来说只是为了赚钱生活，并不追求极致。这当然也是非常合理且正常的，因为并不是每个人的工作都是自己选择的、喜欢的。但是我比较认同的是一种做事情的态度。环顾你周围的那些优秀的人，你会发现他们无论做什么事都会做的像模像样，即使他们做一些非擅长领域的事情，也可以做的非常优秀甚至出彩。&lt;/p&gt;

&lt;p&gt;所以说编程对于大家来说 for fun 还是 for 饭并不重要，重要的是大家的态度&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>《IT 狂人》中的摇滚精神</title>
      <link>https://keelii.com/2018/10/21/rock-and-roll-in-the-it-crowd/</link>
      <pubDate>Sun, 21 Oct 2018 19:10:25 +0000</pubDate>
      
      <guid>https://keelii.com/2018/10/21/rock-and-roll-in-the-it-crowd/</guid>
      <description>&lt;p&gt;前几天听说《生活大爆炸》将于 2019 年 5 月完成终结季（12季），一时间让我想起上大学那会刚开始看这部美剧的。起初是因为大学生活确实过的没意思，也是无意中在腾讯视频上点进去的。刚开始我是从第二季开始看的，后来大学毕业参加工作后就很少看了，一方面工作后确实时间少，一方面看大爆炸时间长了也会有一些审美疲劳，感觉里面的内容不再那么有意思。&lt;/p&gt;

&lt;p&gt;说到有意思这又让我忽然想起来另外一部同样题材的情景喜剧（英剧）《The IT crowed》，这是一部给我留下深刻印象的英国喜剧。讲的是一个公司里的 IT 部门两个技术极客和一个女经理之间发生的一些有趣的事情&lt;/p&gt;

&lt;p&gt;如果你同时看过这两部剧的话你会发现他们之间有很大的差别，美式幽默和英式的幽默完全不是一个风格。英式幽默特别夸张、无理头，甚至讽刺、搞怪。他会用一些你很难想象的非常夸张的表现手法，比如在第一季中的「火焰屏保」&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img10.360buyimg.com/devfe/jfs/t1/3755/16/10751/846454/5bcc3e51E9179c795/3e57d0b0706e52ab.png&#34; alt=&#34;it-crowed-火焰屏保&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一本正经的胡说八道，却让人笑到抽&lt;/p&gt;

&lt;p&gt;还有 &lt;strong&gt;灭火器着火&lt;/strong&gt;。我从来没见过甚至听过有比灭火器着火更离谱且搞笑的事情了吧&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img30.360buyimg.com/devfe/jfs/t1/3296/27/10678/875307/5bcc3eafEf75c2af6/a6fa72572495df69.png&#34; alt=&#34;it-crowed-灭火器着火&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这还不算，镜头一转&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img13.360buyimg.com/devfe/jfs/t1/9182/24/944/574450/5bcc3f27E12b1667d/fcb6c97d159f403d.png&#34; alt=&#34;it-crowed-灭火器made-in-britain&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「Made in Britain - 英国制造」，这算是把自己国家完整的黑了一把&lt;/p&gt;

&lt;p&gt;其实了解英国文化的人应该会懂，英国人特别喜欢讽刺，即使自己国家的东西也可以拿来嘲讽娱乐。剧中这种讽刺还有很多，比如 *0118 999 881 999 119 725* 这居然是一个电话号码！没错，而且还是 &lt;strong&gt;紧急服务&lt;/strong&gt; 电话&lt;strong&gt;，&lt;/strong&gt;有没有搞错，紧急服务哎。这个电话号码在剧中被演绎包装成了一个政府应急服务的广告，其实就是在讽刺政府的工作效率低下。你很难想象一个老年人从楼梯上摔下去快不行的时候打这个电话的场景&lt;/p&gt;

&lt;p&gt;英式的幽默也很注重反转与对比，比如 Moss 和 Ray 翘班的那集。前脚说「我们是同事，我不会丢下你不管的…」后脚撒腿就跑的场景，诸如此类的场景剧中随处可见。以至于我有时候会隐约觉得这种英式幽默和东北人骨子里的那种搞笑爽快的性格非常相似&lt;/p&gt;

&lt;p&gt;在我看来这部剧中的很多元素都来自于英国文化中的 &lt;strong&gt;摇滚精神&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前面说过大学时间很无聊，当年我也实在是没事儿干，去图书馆看过一些摇滚乐方面的东西，所以我在看这剧的时候很有感触&lt;/p&gt;

&lt;p&gt;摇滚乐发源于上世纪 60 年代至 90 年代末期，大家对早期摇滚印象深刻的可能就几个人：美国的猫王（埃尔维斯·普雷斯利），英国的甲壳虫（披头士），再到后来的朋克风平克·弗洛伊德，再到我们这一代人熟悉的迈克杰·克逊、邦·乔维等。你会发现摇滚发展了这么多年，但是摇滚的核心并没变，在我看来摇滚精神就是那种追求自由的孤独感。事实上尤其在国内，大部分人对于摇滚的印象就是吵闹、杂乱、满嘴飙脏话的阶段。大家并没有意识到实际上每个人心中都有摇滚精神体现的。对于生活追求、自由的渴望、世道不公的控诉 — 这些都是。其实摇滚乐是很简单的，有节奏的东西就是摇滚的，而且摇滚的本质就是激发人们听觉（对声音）的原始动力，这是一种特别原生、特别真实的表现方式&lt;/p&gt;

&lt;p&gt;引用一句谢天笑的《命运还是巧合》中的一句歌词：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「命运给了我一双眼睛，放在我的心里，从此为勇敢者哭泣，为不平的世界叹息…」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;话题再转到这部剧上，我在这部剧中看到很多摇滚的元素，无论是剧情的设计和演员演技（哥特男）、服饰（珍的狂暴发型）都充满了摇滚风&lt;/p&gt;

&lt;p&gt;同时这又是一部 IT 技术方面的喜剧，这个题材能设计出完美的搞 IT 的程序员的角色是非常不容易的。导演虽然是拍喜剧的，但是他对演员角色的理解相当深刻，并且深谙程序员的套路，就如 Roy 经常提起电话时的一句反馈「Have you tried turning it off and on again-重启试试」，看这句话懂的人自然就懂了，正所谓「运维有三宝 注销、重启、装系统」。还有就是细心的人会发现这部剧里面的片头曲非常有意思，只有两种音调，以不同的音阶搭配，听起来非常有节奏感觉，是不是就象征着程序员世界中的二进制 0 和 1 呢&lt;/p&gt;

&lt;p&gt;其实最令我印象深刻的是 2013 特别篇中的「The Internet」，这一节中可以说完美的体现了导演对于程序员心理理解，再加上旁观者傻白甜的举动行成了鲜明的对比。当 Moss 对珍说「This, Jan is The Internet - 珍，这就是 Internet」的时候程序员估计会笑喷了吧&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img30.360buyimg.com/devfe/jfs/t1/3872/18/10568/253979/5bcc3f95E69534c32/897afbf3f66a4e07.jpg&#34; alt=&#34;it-crowed-this-is-the-interinet&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这一集是真正意义上的完完全全从程序员的视角拍摄的一集，看过之后你会有一种这集就是为自己拍的的感觉。这种感觉是在其它剧或者电影里面没有的。一开始看似无理头的搞怪，最后逐渐发酵 Jen 居然拿到公司去给一大帮人讲这个盒子上的东西就是整个 Internet，荒唐的是居然大家都信了！再到最后的 Internet 被摔整个「闹剧」结束。整集看下来过瘾的同时也无比的感叹导演对剧本的精准设计和演员出色的演技。反观国内大多数人对程序员的认知还在「牛仔裤、格子衬衫」的阶段吧&lt;/p&gt;

&lt;p&gt;要看完全懂这部剧得有一点关于英国文化关于摇滚的一点认识。英国有很多著名的摇滚乐队，像前面讲到的披头士、弗洛伊德以及滚石、性手枪等一系列的优秀摇滚乐队。这些已经成为了英国人的历史文化基因，摇滚到疯狂的程序被写到了英国人的骨子里。你很难想象 2012 伦敦奥运会开幕式上居然出现一个中年男子抱着一部电吉他在那搞演唱会。你会发现这个国家对于文化的传承有多么的重视，同时对于大众的批判性讽刺性思维有多高的认同与「容忍」程度&lt;/p&gt;

&lt;p&gt;事实上，我觉得程序员这种对技术追求到 nerd 的程度的人群有着非常强烈的摇滚精神，像摇滚一样不顾一切疯狂的追求真理，讨厌任何规矩与束缚。很多时候尤其在一个不重视技术的国家里面（预告下次话题），虽然周围的人对程序员有很深刻的偏见，但是骨子里的那种摇滚精神才使他们真正与众不同&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>