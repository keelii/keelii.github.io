<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pixi.js on 臨池不輟</title>
    <link>https://keelii.com/tags/pixi.js/</link>
    <description>Recent content in pixi.js on 臨池不輟</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 Mar 2019 19:20:04 -0700</lastBuildDate>
    
        <atom:link href="https://keelii.com/tags/pixi.js/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Pixi.js 构建一个视差滚动器（第三篇）</title>
      <link>https://keelii.com/2019/03/19/building-a-parallax-scroller-with-pixijs-cn-3/</link>
      <pubDate>Tue, 19 Mar 2019 19:20:04 -0700</pubDate>
      
      <guid>https://keelii.com/2019/03/19/building-a-parallax-scroller-with-pixijs-cn-3/</guid>
      <description>

&lt;h2 id=&#34;翻译对照&#34;&gt;翻译对照&lt;/h2&gt;

&lt;p&gt;原文：
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=5226&#34;&gt;PART 1&lt;/a&gt;・
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=5666&#34;&gt;PART 2&lt;/a&gt;・
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=6496&#34;&gt;PART 3&lt;/a&gt;・
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=7046&#34;&gt;PART 4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;译文：
&lt;a href=&#34;https://keelii.com/2019/03/16/building-a-parallax-scroller-with-pixijs-cn-1/&#34;&gt;第一篇&lt;/a&gt;・
&lt;a href=&#34;https://keelii.com/2019/03/17/building-a-parallax-scroller-with-pixijs-cn-2/&#34;&gt;第二篇&lt;/a&gt;・
&lt;a href=&#34;https://keelii.com/2019/03/19/building-a-parallax-scroller-with-pixijs-cn-3/&#34;&gt;第三篇&lt;/a&gt;・
第四篇&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;关注 &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=chriscaleb&#34;&gt;@chriscaleb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个系列的教程已经更新到了 &lt;a href=&#34;http://www.pixijs.com/&#34;&gt;PixiJS v4&lt;/a&gt; 版本。&lt;/p&gt;

&lt;p&gt;欢迎再次来到这个系列教程的第三部分，这一节将会涉及到如何使用 pixi.js 制作视差滚动游戏的地图。整个教程到目前为止已经涵盖了很多内容。在第一个教程中，我们学习了一些 pixi.js 基础知识，并将视差滚动应用于几个层上。在第二部分，通过代码重构将一些面向对象的概念应用到实践中。这一节我们将把重点放在第三个更复杂的视差层上，它将代表玩家角色在游戏时将会穿越的地。&lt;/p&gt;

&lt;h3 id=&#34;你将学到什么&#34;&gt;你将学到什么…&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如何处理纹理（textures）和精灵表（sprites sheet）&lt;/li&gt;
&lt;li&gt;对象池 的基础&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;预备知识&#34;&gt;预备知识…&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;pixi.js 基础&lt;/li&gt;
&lt;li&gt;了解 JavaScript 或者 ActionScript 的基础知识&lt;/li&gt;
&lt;li&gt;对面向对象有基本的概念&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们将继续从上一个教程结束的地方开始。你可以使用前两个教程编写的代码，也可以从 &lt;a href=&#34;https://github.com/ccaleb/pixi-parallax-scroller/tree/master/tutorial-2&#34;&gt;GitHub&lt;/a&gt; 下载第二个教程的源代码。也可以在 GitHub上 找到第三节完整教程的 &lt;a href=&#34;https://github.com/ccaleb/pixi-parallax-scroller/tree/master/tutorial-3&#34;&gt;源代码&lt;/a&gt;，即使你遇到了问题，我也鼓励你完成本教程，有疑问可以请仅参考源代码。&lt;/p&gt;

&lt;p&gt;这个系列的教程非常受到 &lt;a href=&#34;http://www.adamatomic.com/canabalt/&#34;&gt;Canabalt&lt;/a&gt; 和 &lt;a href=&#34;https://chrome.google.com/webstore/detail/monster-dash/cknghehebaconkajgiobncfleofebcog?hl=en&#34;&gt;Monster Dash&lt;/a&gt; 游戏的启发，当玩家的英雄在平台之间奔跑和跳跃时，这些游戏都能很好地利用视差滚动来提供花哨的视觉效果。&lt;/p&gt;

&lt;p&gt;在接下来的两节教程中，我们将构建一个非常类似于 Monster Dash 中的滚动游戏地图。 Monster Dash 的游戏地图是由一系列不同宽度和高度的砖块儿构建而成。游戏的目的是通过在砖块儿之间跳跃来尽可能长地生存。游戏地图的滚动速度随着时间的推移而增加。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yeahbutisitflash.com/pixi-parallax-scroller/final/index.html&#34;&gt;&lt;img src=&#34;https://img10.360buyimg.com/devfe/jfs/t1/25206/13/10616/142679/5c887df7E7c1fa38a/eab39f5f7ab1cc6d.png&#34; alt=&#34;ps-tut1-screenshot1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上面就是你这一节将要完成的示例。单击图片即可查看包含砖块儿和间隙的滚动地图。&lt;/p&gt;

&lt;h2 id=&#34;起步&#34;&gt;起步&lt;/h2&gt;

&lt;p&gt;如果你还没有看过第一节和第一节教程，我建议你应该先看完这两节。&lt;/p&gt;

&lt;p&gt;在本节教程中，我们将使用一些新的图片素材。可以直接从 &lt;a href=&#34;www.yeahbutisitflash.com/pixi-parallax-scroller/tutorial-3/resources.zip&#34;&gt;这里&lt;/a&gt; 下载，并将其内容解压缩到项目的 resource 文件夹中。&lt;/p&gt;

&lt;p&gt;下面就是你的 &lt;code&gt;resource&lt;/code&gt; 文件夹的样子（Windows）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img11.360buyimg.com/devfe/jfs/t1/31697/16/6353/53328/5c8e01e2E14bc1c7b/d5701c262078bc35.png&#34; alt=&#34;ps-tut3-screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;macOS 下则是这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img20.360buyimg.com/devfe/jfs/t1/25309/3/11322/64214/5c8e01f7Ed95812be/fa19f72e6cc3b5e7.png&#34; alt=&#34;ps-tut3-screenshot2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;此外，如果你还没有建立一个本地的 web 服务器，请参考第一节的内容。&lt;/p&gt;

&lt;p&gt;值得注意的是，本教程比前两篇长。你可能需要大约两个小时才能完成所有工作。&lt;/p&gt;

&lt;h2 id=&#34;游戏地图&#34;&gt;游戏地图&lt;/h2&gt;

&lt;p&gt;正如上面的演示中展示的那样，我们的游戏地图有很多种展示形式。如砖块儿的宽度和高度各不相同。每个跨度还包括一系列窗户和墙壁装饰元素。墙壁装饰本身由管道和通风口组成。&lt;/p&gt;

&lt;p&gt;那么墙跨度是如何构建的？每个跨度都是由一系列拼接在一起的垂直切片构成的。每个切片的大小为 64 x 256 像素。下图显示了示例砖块儿。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img20.360buyimg.com/devfe/jfs/t1/11199/10/12039/18165/5c8e031aE2a8746ce/c51ef91aeebd739b.png&#34; alt=&#34;diagram-1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过垂直移动每个切片的位置来处理砖块儿的高度。下面的示意图中我们可以看到，第二个面墙的切片部分位于视口的可见区域下方（译者：超出视口），使其看起来低于第一面墙。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img14.360buyimg.com/devfe/jfs/t1/28702/23/11291/23279/5c8e047aE0dc68c77/08ba190fd4f5f08b.png&#34; alt=&#34;diagram-2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;大多数情况，一而墙内的每个切片将会是水平对齐的。但有一个例外。 Monster Dash 有一个阶梯式的跨度，让玩家可以直接跌落到下一个水平线上。以下是它的构造方式：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img13.360buyimg.com/devfe/jfs/t1/14544/9/11325/22909/5c8e0484E33aa7b33/c2b3b720df1d69a1.png&#34; alt=&#34;diagram-3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果你仔细观察上面的示意图，你应该注意到这里真正的是墙面有两个（第一个跨度高于第二个），它们通过中间的一个切片（台阶）连接起来。&lt;/p&gt;

&lt;p&gt;您可能会惊讶地发现我们的整个游戏地图将仅由八种不同类型的垂直切片构成：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img11.360buyimg.com/devfe/jfs/t1/18163/12/11214/22059/5c8e053aE742a81ce/3fe250596cbb7bab.png&#34; alt=&#34;diagram-4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这些切片的顺序很重要。我们再来谈谈这个问题。&lt;/p&gt;

&lt;h2 id=&#34;分解砖块墙&#34;&gt;分解砖块墙&lt;/h2&gt;

&lt;p&gt;一面砖块墙包括三个主要部分：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;前边缘&lt;/li&gt;
&lt;li&gt;中间部分&lt;/li&gt;
&lt;li&gt;后边缘&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;前/后边缘都只由一个垂直切片表示。然而，中间部分可以由一个或多个切片制成。切片越多，墙跨度就越长。我们将制作一面有 30 个切片的砖块墙。下图可以解释砖块墙的三大部分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img20.360buyimg.com/devfe/jfs/t1/26701/4/11364/142241/5c8e0660E36cd06e7/61bb2ce4e0f7b003.png&#34; alt=&#34;diagram-5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;墙的中间部分只有下面两种切片：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;窗口（window）&lt;/li&gt;
&lt;li&gt;装饰（decoration）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此整个墙的中间部分长度为 6，结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window, decoration, window, decoration, window, decoration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而，通常情况下，砖块墙的中间部分是非偶数个切片才能保证出现的容器即有亮灯的也有灭的。所以我们使用 7 个切片来制作中间部分&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window, decoration, window, decoration, window, decoration, window
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了保证砖块墙尽可能看起来有趣，窗户可以点亮或不点亮，我们可以随机选择三种装饰切片。因此，墙的中间部分将由五种不同类型的切片构成。&lt;/p&gt;

&lt;p&gt;为了增加更多的切片种类，我们从砖块墙的边缘素材中（两个）选择两个切片做为前后边缘（译者：边缘素材有两个，可以随机选一个做前边缘，然后翻转它做成后边缘，但是不能一个做前一个做后，示意图中的 front &amp;amp; back 和图片没有对应关系），后边缘也可以使用同样的前边缘，因为我们只需要把它（前边缘）水平翻转然后正确地拼接到后边缘即可。台阶切片很少会出现，所以我们只需要用一个切片。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img13.360buyimg.com/devfe/jfs/t1/26044/20/11490/360476/5c8f0047Ec7d99a6b/b226b682c6da3a9f.png&#34; alt=&#34;diagram-6-1024x531&#34; /&gt;&lt;/p&gt;

&lt;p&gt;打开上面的素材，单独放在一个浏览器 tab 里面，可以方便制作时查看它。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;不要将切片 &lt;strong&gt;类型&lt;/strong&gt; 与用于构建指定砖块墙的切片数混淆。例如，一面砖块墙可以有 30 个垂直切片，但实际上只由 8 类切片构建。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在你已经了解了砖块墙是如何构建的，我们可以开始实现它了。&lt;/p&gt;

&lt;h2 id=&#34;精灵表-sprite-sheet&#34;&gt;精灵表（Sprite sheet）&lt;/h2&gt;

&lt;p&gt;如上所述，我们的砖块墙由八种不同类型的砖块构成。表示这些切片的最简单方法是为每个切片提供单独的 PNG文件。虽然这是一种办法，但我们实际上会将所有切片添加到一个称为 &lt;strong&gt;精灵表&lt;/strong&gt; 的大型 PNG 文件中。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;精灵表通常也称为 &lt;strong&gt;纹理图集（texture atlas&lt;/strong&gt;） 。我们将在本教程中使用 &lt;strong&gt;精灵表&lt;/strong&gt; 这个术语。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我在本教程的 resources.zip 文件中提供了精灵表。这是一个名为 &lt;code&gt;wall.png&lt;/code&gt; 的文件，如下所示。所有八个切片都已打包到一个位图上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img14.360buyimg.com/devfe/jfs/t1/16841/31/11340/23788/5c8f02ecEcdd940cb/a38fb14d2958229f.png&#34; alt=&#34;sprite-sheet&#34; /&gt;&lt;/p&gt;

&lt;p&gt;资源文件夹中还有一个与精灵表对应的 &lt;code&gt;wall.json&lt;/code&gt; 文件。可以直接用文本编辑器打开。此文件使用 JSON 数据格式来定义精灵表中单独位图切片的名称和位置。使用精灵表时，表中的每个单独的位图称为 &lt;strong&gt;帧&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我们的整个精灵表将作为纹理加载到代码中（中间层和远景图层也这么加载过）。因此，有时会将框架视为子纹理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;并不需要完全理解 JSON 文件，因为 Pixi 将处理它。但是，我们可以探索一下正在使用的这个文件。下面这段是来自 JSON 数据中的一段，表示第一个墙边切片的框架。我已经为高亮了一些代码行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;edge_01&amp;quot;: // 高亮
{
  &amp;quot;frame&amp;quot;: {&amp;quot;x&amp;quot;:128,&amp;quot;y&amp;quot;:0,&amp;quot;w&amp;quot;:64,&amp;quot;h&amp;quot;:256},// 高亮
  &amp;quot;rotated&amp;quot;: false,
  &amp;quot;trimmed&amp;quot;: false,
  &amp;quot;spriteSourceSize&amp;quot;: {&amp;quot;x&amp;quot;:0,&amp;quot;y&amp;quot;:0,&amp;quot;w&amp;quot;:64,&amp;quot;h&amp;quot;:256},
  &amp;quot;sourceSize&amp;quot;: {&amp;quot;w&amp;quot;:64,&amp;quot;h&amp;quot;:256}
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行包含与框架关联的 &lt;strong&gt;唯一名称&lt;/strong&gt;（&lt;code&gt;edge_01&lt;/code&gt;）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;edge_01&amp;quot;:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每当我们想要从精灵表中直接获取这个墙切片的图像时，我们将使用此名称。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果您不熟悉 JSON 数据格式，则可以在此 &lt;a href=&#34;https://zh.wikipedia.org/zh-cn/JSON&#34;&gt;Wikipedia 条目&lt;/a&gt; 中找到更多信息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下一个高亮行代码定义了框架的矩形区域：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;frame&amp;quot;: {&amp;quot;x&amp;quot;:128,&amp;quot;y&amp;quot;:0,&amp;quot;w&amp;quot;:64,&amp;quot;h&amp;quot;:256},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本质上，它用于在精灵表中定位帧的位图。&lt;/p&gt;

&lt;p&gt;JSON 文件中还有其他七种类型的切片。每个切片将由唯一的帧名称表示。使用精灵表时，你只需要知道 &lt;strong&gt;唯一名称&lt;/strong&gt; 即可。下面我还提供了一张标有每个切片类型的图片。也可以单独打开这个图片，方便回顾。&lt;/p&gt;

&lt;p&gt;wall.json 的后面，有一些元数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;meta&amp;quot;: {
  &amp;quot;app&amp;quot;: &amp;quot;http://www.codeandweb.com/texturepacker &amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
  &amp;quot;image&amp;quot;: &amp;quot;wall.png&amp;quot;,
  &amp;quot;format&amp;quot;: &amp;quot;RGBA8888&amp;quot;,
  &amp;quot;size&amp;quot;: {&amp;quot;w&amp;quot;:256,&amp;quot;h&amp;quot;:512},
  &amp;quot;scale&amp;quot;: &amp;quot;1&amp;quot;,
  &amp;quot;smartupdate&amp;quot;: &amp;quot;$TexturePacker:SmartUpdate:fc102f6475bdd4d372c...&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在该数据表示精灵表的实际文件的相对路径。 Pixi 将使用该数据加载正确的 PNG 文件。&lt;/p&gt;

&lt;h2 id=&#34;纹理打包器-texturepacker&#34;&gt;纹理打包器（TexturePacker）&lt;/h2&gt;

&lt;p&gt;我使用了一个工具来生成本教程的精灵表和 JSON 文件。它的名字叫 &lt;a href=&#34;http://www.codeandweb.com/texturepacker&#34;&gt;TexturePacker&lt;/a&gt;，可用于Windows，Mac OS X 和 Linux。它可以导出许多精灵表格式，包括 pixi.js 使用的JSON（哈希）格式。我不会在本教程中介绍如何使用 TexturePacker，但它非常容易掌握。付费版本也物超所值，还有一个免费版本，适合那些想先学习基础知识的人。&lt;/p&gt;

&lt;h2 id=&#34;加载精灵表&#34;&gt;加载精灵表&lt;/h2&gt;

&lt;p&gt;既然我们对精灵表有一点了解了，就让我们继续把它加载进程序。我们首先将一些代码添加到项目的 Main 类中。用文本编辑器中打开 Main.js。&lt;/p&gt;

&lt;p&gt;在文件的末尾，添加以下方法来加载精灵表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Main.prototype.loadSpriteSheet = function() {
  var loader = PIXI.loader;
  loader.add(&amp;quot;wall&amp;quot;, &amp;quot;resources/wall.json&amp;quot;);
  loader.once(&amp;quot;complete&amp;quot;, this.spriteSheetLoaded.bind(this));
  loader.load();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们使用了 &lt;code&gt;PIXI.loaders.Loader&lt;/code&gt; 类，它可用于加载图像，精灵表和位图字体文件。我们直接从 &lt;code&gt;PIXI.loader&lt;/code&gt; 属性获取加载器的预定义的实例来使用加载器，所有资源都可以人这里加载。所以，只需把 &lt;code&gt;wall.json&lt;/code&gt; 文件也添加进去。我们传递一个与文件关联的唯一 ID 作为第一个参数，并将资源的实际相对路径作为第二个参数传递。&lt;/p&gt;

&lt;p&gt;加载精灵表后，PIXI.loaders.Loader 类会触发一个 &lt;code&gt;complete&lt;/code&gt; 事件。为了响应该事件，我们只需要绑定 complete 方法到自定义函数 &lt;code&gt;spriteSheetLoaded()&lt;/code&gt; 中，这个函数我们稍后实现。&lt;/p&gt;

&lt;p&gt;最后，调用我们的 PIXI.loaders.Loader 实例的 &lt;code&gt;load()&lt;/code&gt; 方法来真正加载我们的精灵表。加载完后，Pixi 将提取所有帧并将其存储在内部的纹理缓存中以便后续使用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;目前，远景层和中间层图像在其构造函数中加载。但是，我们实际上可以预先加载这些图像，并避免在实例化远景层和中间类时出现短暂的延迟。将它们添加到我们的 Loader 实例中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; loader.add(&amp;quot;wall&amp;quot;, &amp;quot;resources/wall.json&amp;quot;);
&amp;gt; loader.add(&amp;quot;bg-mid&amp;quot;, &amp;quot;resources/bg-mid.png&amp;quot;); // 添加
&amp;gt; loader.add(&amp;quot;bg-far&amp;quot;, &amp;quot;resources/bg-far.png&amp;quot;); // 添加
&amp;gt; ```
&amp;gt;
&amp;gt; 无需对 Far 或 Mid 类进行任何更改，因为在尝试从文件系统加载纹理之前，对  `PIXI.Texture.fromImage()` 的调用将优先查询内部纹理缓存。

现在让我们编写 `spriteSheetLoaded()` 方法。在文件末尾添加以下内容：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.spriteSheetLoaded = function() {
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
我们需要编写这个空方法。之前我们创建了一个 Scroller 类的实例，并在 Main 类的构造函数中启动了我们的主循环。但是，我们现在要等到精灵表加载完成后再进行所有操作。让我们将该代码移动到我们的 `spriteSheetLoaded()` 方法中。

向上滚动到构造函数并删除以下两行：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function Main() {
  this.stage = new PIXI.Container();
  this.renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;ldquo;game-canvas&amp;rdquo;)}
  );&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;this.scroller = new Scroller(this.stage); // 删除&lt;/p&gt;

&lt;p&gt;requestAnimationFrame(this.update.bind(this)); // 删除
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
再回到你的 `spriteSheetLoaded()` 方法并在那里添加删除的两行：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.spriteSheetLoaded = function() {
  this.scroller = new Scroller(this.stage);
  requestAnimationFrame(this.update.bind(this));
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
最后，返回构造函数并调用 `loadSpriteSheet()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function Main() {
  this.stage = new PIXI.Container();
  this.renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;ldquo;game-canvas&amp;rdquo;)}
  );&lt;/p&gt;

&lt;p&gt;this.loadSpriteSheet(); // 添加
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
现在保存代码并刷新浏览器。在 Chrome 的 JavaScript 控制台中查看没有错误。

## 测试精灵表

虽然我们已经成功加载了精灵表，但我们并不知道帧（我们的八个垂直壁切片类型）是否已真正地存储在 Pixi 的纹理缓存中。所以让我们继续创建一些使用其中一些精灵来使用这使用帧。

我们将在 `spriteSheetLoaded()` 方法中执行我们的测试。将以下代码添加到其中：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.spriteSheetLoaded = function() {
  this.scroller = new Scroller(this.stage);
  requestAnimationFrame(this.update.bind(this));&lt;/p&gt;

&lt;p&gt;var slice1 = PIXI.Sprite.fromFrame(&amp;ldquo;edge_01&amp;rdquo;); // 高亮
  slice1.position.x = 32; // 高亮
  slice1.position.y = 64; // 高亮
  this.stage.addChild(slice1); // 高亮
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
在上面的代码中，我们利用了 PIXI.Sprite 类的 `fromFrame()` 静态方法。它使用纹理缓存中与指定帧 ID 匹配的纹理创建一个新的精灵。我们指定 `edge_01` 帧用来表示砖块墙前边缘的切片。

保存代码并刷新浏览器以查看切片。不用担心它展示的位置，位置现在还不重要。

让我们添加第二个垂直切片。这次我们将使用砖块墙中间的切片类型。为了更精确，我们将使用精灵表中名为`decoration_03` 的帧：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.spriteSheetLoaded = function() {
  this.scroller = new Scroller(this.stage);
  requestAnimationFrame(this.update.bind(this));&lt;/p&gt;

&lt;p&gt;var slice1 = PIXI.Sprite.fromFrame(&amp;ldquo;edge_01&amp;rdquo;);
  slice1.position.x = 32;
  slice1.position.y = 64;
  this.stage.addChild(slice1);&lt;/p&gt;

&lt;p&gt;var slice2 = PIXI.Sprite.fromFrame(&amp;ldquo;decoration_03&amp;rdquo;); // 添加
  slice2.position.x = 128; // 添加
  slice2.position.y = 64; // 添加
  this.stage.addChild(slice2); // 添加
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
再次保存并测试。现在应该看到两个垂直墙切片位于舞台上，类似于下面的这个屏幕截图。

![tut3-testing-sprite-sheet](https://img10.360buyimg.com/devfe/jfs/t1/14918/30/11267/98749/5c8f0dd7Ee4736269/d06820174522e100.png)

希望你现在对精灵表的框架已成功加载并缓存产生了一些成就感。从 `spriteSheetLoaded()` 方法中删除测试代码。方法应再次如下所示：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.spriteSheetLoaded = function() {
  this.scroller = new Scroller(this.stage);
  requestAnimationFrame(this.update.bind(this));
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
保存你的修改

## 一些 GPU 理论

我还没有解释为什么我们选择将切片打包成一个精灵表而不是单独加载八个 PNG 到内存中。原因和性能相关。 Pixi 的 WebGL 渲染器利用计算机的图形处理单元（GPU）来加速图形性能。但是为了保证最佳性能，我们必须至少了解一点 GPU 的工作原理。

GPU 更擅长一次处理大数据量的场景。 Pixi 会迎合 GPU 的这个特点，把数据对象批量发送给 GPU。但是，它只能批量处理具有相似状态的展示对象。当遇到具有不同状态的显示对象时，表示已经发生状态改变并且 GPU 会停止以绘制当前批次。程序中发生的状态更改越少，GPU 需要执行的绘制操作就越少，以便呈现展示列表。 GPU 执行的绘制操作越少，渲染性能就越快。

&amp;gt; 刚刚提到的 **绘制**（draw） 操作和我们平常绘画意思差不多。

不幸的是，每当遇到具有不同纹理的展示对象时，状态就会发生改变。精灵表可以帮助避免状态更改，因为所有图像都存储在单个纹理中。 GPU 可以非常愉快地从精灵表中绘制每个帧（或子纹理），而无需单独的调用绘制。

但是，可以存储在 GPU 上的纹理存在大小限制。大多数现代 GPU 可以存储大小为 2048×2048 像素的纹理。因此，如果您要使用精灵表，请确保其尺寸不超过 GPU 纹理的限制。值得庆幸的是，我们的精灵表很小。

因此，与将每个墙切片的图像存储在单独的纹理上相比，我们的精灵表可以帮助显着提高滚动器的性能。

## 展示游戏地图

所以我们已经成功加载了精灵表并且还设法显示了一些帧，但是我们如何真正地构建一个包含砖块墙的大地图？

我想最简单的方法是创建一个精灵数组，其中每个精灵代表我们地图中的垂直墙切片。然而，考虑到每个切片的宽度比较短，我们的整个地图将很容易由数千个精灵组成。这是很多精灵都将存储在内存中。另外，如果我们只是将所有这些精灵转储到我们的展示列表上，那么它会给渲染器带来很大的压力，可能会影响游戏的帧速率。

另一种方法是实例化并仅显示将在视口中可见的精灵。当地图滚动时，最左边的精灵最终将离开屏幕。当发生这种情况时，我们可以从显示列表中删除该精灵，并在视口最右边的外部添加一个新的精灵。通过这种方法，我们可以向用户提供滚动整个地图的错觉，而实际上只需要处理视口中当前可见的地图部分。

虽然第二种方法肯定比第一种方法更好，但它需要为我们的精灵进行不断的内存分配和释放：为进入的每个新精灵分配内存，为离开的精灵释放内存。为什么这么做比较糟糕呢？好吧，分配内存需要宝贵的 CPU 周期，这可能会影响游戏的性能。如果您不得不持续分配内存，那将避免不了这个问题。

释放之前对象使用的内存也是潜在的 CPU 性能损耗。 JavaScript 运行时利用垃圾收集器释放以前被不再需要的对象使用的内存。但是，你无法直接控制何时进行垃圾收集，如果必须释放大量内存，则该过程可能需要几毫秒。因此，不断实例化精灵再从展示列表中删除精灵将导致频繁的垃圾收集，这会影响游戏的性能。

第三种方法可以避免前两种问题。它被称为 **对象池**，它能在不触发 JavaScript 的垃圾收集器的情况下更加智能地使用内存。

## 对象池（Object Pooling）

想理解对象池，请考虑一个简单的游戏场景。在射击游戏中，玩家的船可能会在游戏过程中发射数十万枚射弹，但由于船的射速，任何时候都只能有 20 枚射弹进入屏幕。因此，仅在游戏代码中创建 20 个射弹实例并在游戏过程中重新使用这些射弹是更好的。

20 个射弹可以存放在一个阵列中。每次玩家开火时，我们从阵列中移除一个射弹并将其添加到屏幕上。当射弹离开屏幕（或击中敌人）时，我们将其添加回阵列以便稍后再次使用。重要的是我们永远不需要创建新的射弹实例。相反，我们只使用预先创建的 20 个实例池。在我们的示例中，数组将是我们的对象池。这样合理吗？

&amp;gt; 如果您想了解有关对象池的更多信息，请查看此 [Wikipedia条目](https://zh.wikipedia.org/zh-cn/%E5%AF%B9%E8%B1%A1%E6%B1%A0%E6%A8%A1%E5%BC%8F)。

我们可以将对象池应用到游戏地图中，并具有以下内容：一个窗口（window）切片池；一幢墙面装饰（decoration）切片；一层前边缘；一层后边缘；还有一个台阶。

因此，虽然我们的游戏地图最终可能包含数百个窗口，但实际上我们只需要创建足够的窗口精灵来覆盖视口的宽度。当一个窗口即将在我们的视口中显示时，我们只需从 windows 对象池中检索一个窗口精灵。当该窗口滚出视图时，我们将其从显示列表中删除并将其返回到对象池。我们将这个原则应用于边缘，装饰和台阶。

知道这就足够了。让我们开始构建一个对象池类来保存我们的切片精灵。

## 创建一个对象池类

由于我们的游戏地图代表了一系列砖块墙，我们将创建一个名为 `WallSpritesPool` 的类，作为我们各种墙壁部件的池子。

&amp;gt; 更通用的类名可能是 `MapSpritesPool`，也可以是 `ObjectPool`。但是，就本教程而言，`WallSpritesPool` 是比较合适的。

在文本编辑器中创建一个新文件并添加以下构造函数：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.windows = [];
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
保存文件并将其命名为 `WallSpritesPool.js`。

在构造函数中，我们定义了一个名为 windows 的空数组。此数组将充当我们地图中所有的窗口精灵的对象池。

## 给 windows 池子添加元素

我们的数组需要预先填充一些窗口精灵。请记住，我们的砖块墙可以支持两种类型的窗户 — 一个开灯的窗户和一个没有开灯的窗户 - 所以我们需要确保我们添加两种类型足够多。通过将以下代码添加到构造函数来填充数组：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.windows = [];&lt;/p&gt;

&lt;p&gt;this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
上面的代码为对象池添加了 12 个窗口精灵。前 6 个精灵代表我们亮灯的窗口（`window_01`），而余他 6 个精灵代表未亮灯的窗口（`window_02`）。

从对象池中检索精灵时，它们将从数组的前面获取。根据我们在填充时将精灵添加到数组中的顺序，对窗口精灵的前 6 个请求将始终返回一个亮灯的窗口，而接下来的 6 个请求将始终返回一个未亮灯的窗口。我们从池中获得的窗口切片类型需要 **随机** 出现。这可以通过在填充数组后数组元素进行打乱来实现。

以下方法将把传递给它的数组打乱。添加方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.shuffle = function(array) {
  var len = array.length;
  var shuffles = len * 3;
  for (var i = 0; i &amp;lt; shuffles; i++)
  {
    var wallSlice = array.pop();
    var pos = Math.floor(Math.random() * (len-1));
    array.splice(pos, 0, wallSlice);
  }
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
现在从构造函数调用 `shuffle()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.windows = [];&lt;/p&gt;

&lt;p&gt;this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;));&lt;/p&gt;

&lt;p&gt;this.shuffle(this.windows); // 调用
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
现在让我们做一些重构，因为有一个更简洁的方法来填充我们的数组。由于我们实际上是在数组中添加两组精灵（亮灯和不亮灯的窗口），我们可以替换以下代码行：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.windows = [];&lt;/p&gt;

&lt;p&gt;this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_01&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;)); // 删除
  this.windows.push(PIXI.Sprite.fromFrame(&amp;ldquo;window_02&amp;rdquo;)); // 删除&lt;/p&gt;

&lt;p&gt;this.shuffle(this.windows);
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
用下面的代替：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.windows = [];&lt;/p&gt;

&lt;p&gt;this.addWindowSprites(6, &amp;ldquo;window_01&amp;rdquo;); // 添加
  this.addWindowSprites(6, &amp;ldquo;window_02&amp;rdquo;); // 添加&lt;/p&gt;

&lt;p&gt;this.shuffle(this.windows);
}&lt;/p&gt;

&lt;p&gt;// 添加
WallSpritesPool.prototype.addWindowSprites = function(amount, frameId) {
  for (var i = 0; i &amp;lt; amount; i++)
  {
    var sprite = PIXI.Sprite.fromFrame(frameId);
    this.windows.push(sprite);
  }
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.shuffle = function(array) {
  var len = array.length;
  var shuffles = len * 3;
  for (var i = 0; i &amp;lt; shuffles; i++)
  {
    var wallSlice = array.pop();
    var pos = Math.floor(Math.random() * (len-1));
    array.splice(pos, 0, wallSlice);
  }
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
保存更改。

`addWindowSprites()` 方法允许我们向 windows 数组中添加一些在精灵表中指定的精灵帧。因此，它可以很容易地为我们的池子添加一组 6 个亮灯精灵和一组 6 个未亮灯精灵。

在继续之前，我们应该再做一次重构。将构造函数中的代码移动到单独的方法中。删除以下行：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.windows = []; // 删除&lt;/p&gt;

&lt;p&gt;this.addWindowSprites(6, &amp;ldquo;window_01&amp;rdquo;); // 删除
  this.addWindowSprites(6, &amp;ldquo;window_02&amp;rdquo;); // 删除&lt;/p&gt;

&lt;p&gt;this.shuffle(this.windows); // 删除
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
使用一个新方法替换：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.createWindows = function() {
  this.windows = [];&lt;/p&gt;

&lt;p&gt;this.addWindowSprites(6, &amp;ldquo;window_01&amp;rdquo;);
  this.addWindowSprites(6, &amp;ldquo;window_02&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;this.shuffle(this.windows);
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
最后，从构造函数中调用 `createWindows()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.createWindows();
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
好的，我们目前用代码创建了窗口精灵，将它们添加到一个数组，并打乱该数组。继续之前保存文件。

## 为什么使用十二个窗口精灵

从技术上讲，我们可以在池中使用少于 12 个窗口精灵。毕竟，我们只需要足够的精灵来覆盖视口的宽度。我选择十二个的原因是为了让砖块墙的亮灯和不亮灯窗户具有一些随机性。然而值得注意的是，我可以在合理范围内使用任意数量的精灵，只要它为我提供足够的窗口精灵以在视口内生成砖块墙。

## 借用（borrow）和归还（return）精灵

我们的对象池有一组窗口精灵，但是我们还没有提供从池中获取精灵或返回池的公共方法。

&amp;gt; 所有方法和属性都可以在 JavaScript 中公开访问。这可能使你难以识别属于你的类 API 的方法和属性以及处理实现细节的方法和属性。当我把某些东西称为“公开”时，我的意思是说我打算在类的外部使用它。

我们将提供以下两种方法：

* `borrowWindow()`
* `returnWindow()`

`borrowWindow()` 方法将从 windows 池中删除一个窗口精灵，并返回对它的引用供你使用。完成后，可以通过调用 `returnWindow()` 将精灵作为参数传递回游戏池。

好的，我们在类的构造函数之后添加 `borrowWindow()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.createWindows();
}
// 添加
WallSpritesPool.prototype.borrowWindow = function() {
  return this.windows.shift();
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
正如你所看到的，这是一个相当简单的方法，它只是从 windows 数组的前面删除第一个精灵并返回它。

&amp;gt; `borrowWindow()` 方法不会检查池中是否还有精灵。我们在这一系列教程中都不会太在意这种异常情况，但在尝试从中返回内容之前，检查一下精灵池是否为空是一个好习惯。有多种策略可用于处理空池子。一个常见的方法是在干燥（没有元素）时动态增加池的大小。

现在直接在其下面添加 `returnWindow()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.borrowWindow = function() {
  return this.windows.shift();
};
// 添加	
WallSpritesPool.prototype.returnWindow = function(sprite) {
  this.windows.push(sprite);
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
就像 `borrowWindow()` 一样，`returnWindow()` 方法很简单。它将精灵作为参数并将该精灵压入到 windows 数组的末尾。

我们现在有一种从对象池中借用窗口精灵的方法，一旦我们完成它就将精灵返回给（归还）对象池的方法。

保存更改。

## 快速回顾

查看一下 `WallSpritesPool` 类。并没有很多代码，但重要的是你要了解在添加之前发生了什么。以下是类的当前版本：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.createWindows();
}&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.borrowWindow = function() {
  return this.windows.shift();
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.returnWindow = function(sprite) {
  this.windows.push(sprite);
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.createWindows = function() {
  this.windows = [];&lt;/p&gt;

&lt;p&gt;this.addWindowSprites(6, &amp;ldquo;window_01&amp;rdquo;);
  this.addWindowSprites(6, &amp;ldquo;window_02&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;this.shuffle(this.windows);
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.addWindowSprites = function(amount, frameId) {
  for (var i = 0; i &amp;lt; amount; i++)
  {
    var sprite = PIXI.Sprite.fromFrame(frameId);
    this.windows.push(sprite);
  }
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.shuffle = function(array) {
  var len = array.length;
  var shuffles = len * 3;
  for (var i = 0; i &amp;lt; shuffles; i++)
  {
    var wallSlice = array.pop();
    var pos = Math.floor(Math.random() * (len-1));
    array.splice(pos, 0, wallSlice);
  }
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
该类只创建一个包含 6 个亮灯窗口精灵和 6个未亮灯窗口精灵数组。该数组充当窗口的精灵池，并且被打乱以确保随机混合两种状态。提供了两个公共方法 — `borrowWindow()` 和 `returnWindow()` - 它们允许从精灵池中借用一个窗口精灵，然后归还到池中。

这就是它要做的所有事情了。当然，我们仍然需要考虑其他切片类型（前边缘，后边缘，墙面装饰和墙壁台阶），但我们很快就会将它们添加到我们的 WallSpritesPool 类中。首先让我们把将精灵池的代码引用到页面，保证正常运行。

## 测试你的对象池

转到你的 index.html 文件并引用 `WallSpritesPool` 类的源文件：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.0.0/pixi.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;Far.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;Mid.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;Scroller.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;WallSpritesPool.js&#34;&gt;&lt;/script&gt; &lt;!-- 添加 --&gt;
&lt;script src=&#34;Main.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
保存代码。

现在打开 Main.js。我们将对 Main 类进行一些临时更改，以便测试对象池。

我们首先在 `spriteSheetLoaded()` 方法中创建我们的对象池的实例，创建将用于保存从池中获取的切片精灵数组：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.spriteSheetLoaded = function() {
  this.scroller = new Scroller(this.stage);
  requestAnimationFrame(this.update.bind(this));&lt;/p&gt;

&lt;p&gt;this.pool = new WallSpritesPool(); // 添加
  this.wallSlices = []; // 添加
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
在上面的代码中，我们将对象池实例存储在名为 pool 的成员变量中，而我们的数组的成员变量名为 `wallSlices`。

现在让我们编写一些代码来从池中获取指定数量的窗口并将它们连续地添加到舞台上。添加以下测试方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.borrowWallSprites = function(num) {
  for (var i = 0; i &amp;lt; num; i++)
  {
    var sprite = this.pool.borrowWindow();
    sprite.position.x = -32 + (i * 64);
    sprite.position.y = 128;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.wallSlices.push(sprite);

this.stage.addChild(sprite);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
除了将窗口精灵添加到舞台，上面的 `borrowWallSprites()` 方法还将每个精灵添加到我们的 `wallSlices` 成员变量中。这样做的原因是我们需要能够从第二个测试方法中访问（删除、移除、归还）这些窗口精灵，我们现在将编写它们。添加以下内容：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.returnWallSprites = function() {
  for (var i = 0; i &amp;lt; this.wallSlices.length; i++)
  {
    var sprite = this.wallSlices[i];
    this.stage.removeChild(sprite);
    this.pool.returnWindow(sprite);
  }&lt;/p&gt;

&lt;p&gt;this.wallSlices = [];
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
这个 `returnWallSprites()` 方法删除添加到舞台的所有窗口切片，并将这些精灵归还到对象池。

通过这两种方法，我们可以验证我们是否可以从对象池中借用窗口精灵，并将这些精灵归还给池子。我们将使用Chrome 的 JavaScript 控制台窗口：

刷新浏览器并打开JavaScript控制台。手动执行如下代码：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.borrowWallSprites(9);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&amp;gt; 请记住，我们的 Main 类可以通过主全局变量 main 访问，我们可以使用它来调用 `borrowWallSprites()` 方法。

就像下面的截图一样，你应该看到舞台上有九个窗口精灵。都是从你的对象池中 **借** 来的，然后被添加到舞台上。还要注意，亮灯和亮灯的窗口序列可能是随机出现的。这是因为池中的窗口数组在创建后被打乱了。

![tut3-testing-object-pool](https://img12.360buyimg.com/devfe/jfs/t1/31720/25/6450/27075/5c8f20c3E419f8f9b/1c176082df00c88d.png)

现在让我们验证是否可以将这些精灵归还给对象池。在控制台中输入以下内容：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.returnWallSprites();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
精灵墙应该从舞台上消失，并将返回到对象池。

这还不能满足我们的实际需示。最简单的方法是从池中请求更多窗口并检查它们是否也出现在屏幕上。让我们从游泳池中再借用九个窗口：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.borrowWallSprites(9);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
然后再归还：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.returnWallSprites();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
我们现在从对象池中获得了总共18个精灵。请记住，池中只包含 12 个窗口精灵（6个开灯的，6 个不开灯的）。因此，精灵正在从池中借用并在我们完成后成功返回。如果没有被返还，那么当对象池的内部数组变空时，会报运行时错误。

JavaScript 中的所有内容都可以公开访问，我们可以在任何时候轻松检查对象池的内部数组。尝试从控制台检查数组的大小：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.pool.windows.length&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
这么做应该返回长度 12。现在使用以下方法从池中借用四个窗口精灵：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.borrowWallSprites(4);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
再次查看池子中的精灵个数：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.pool.windows.length&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
它现在应该只包含 8 个精灵。最后通过调用 `returnWallSprites()` 将精灵集返回池中。再次检查对象池的大小，并确认其长度为 12。

我对咱们的对象池能正常运行感到满意。让我们继续，但保留你添加到 Main 类的测试代码，因为我们很快就会再次使用它。

## 向对象池中添加墙面装饰

目前我们的对象池仅提供窗口精灵，但我们还需要添加对前边缘，后边缘，墙面装饰切片和台阶的支支持。让我们从三个墙面装饰切片开始。

如果你还记得，我们的一些墙上装饰着管道和通风口。这些切片安插在在每个窗口之间。让我们更新我们的 `WallSpritesPool` 类以包含墙面装饰切片。代码与口的对象池非常相似，所以它们看起来都应该很熟悉。

打开 `WallSpritesPool.js` 并在构造函数中进行以下调用：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.createWindows();
  this.createDecorations(); // 添加
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
现在真正来实现 `createDecorations()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.createWindows = function() {
  this.windows = [];&lt;/p&gt;

&lt;p&gt;this.addWindowSprites(6, &amp;ldquo;window_01&amp;rdquo;);
  this.addWindowSprites(6, &amp;ldquo;window_02&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;this.shuffle(this.windows);
};
// 实现
WallSpritesPool.prototype.createDecorations = function() {
  this.decorations = [];&lt;/p&gt;

&lt;p&gt;this.addDecorationSprites(6, &amp;ldquo;decoration_01&amp;rdquo;);
  this.addDecorationSprites(6, &amp;ldquo;decoration_02&amp;rdquo;);
  this.addDecorationSprites(6, &amp;ldquo;decoration_03&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;this.shuffle(this.decorations);
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
上面的代码通过调用 `addDecorationSprites()` 方法将 18 个装饰精灵添加到对象池中（稍后我们将实现这个方法）。前六个精灵使用我们的精灵表中的 `decoration_01` 帧。接下来的六个使用 `decoration_02`，最后六个使用 `decoration_03`。然后调用 `shuffle()` 确保精灵随机放置在我们的装饰数组中，我们已将其声明为此类的成员变量，并用于存储墙面装饰精灵。

现在让我们来编写 `addDecorationSprites()` 方法。在 `addWindowSprites()` 方法之后直接添加以下内容：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.addWindowSprites = function(amount, frameId) {
  for (var i = 0; i &amp;lt; amount; i++)
  {
    var sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
    this.windows.push(sprite);
  }
};
// 实现
WallSpritesPool.prototype.addDecorationSprites = function(amount, frameId) {
  for (var i = 0; i &amp;lt; amount; i++)
  {
    var sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
    this.decorations.push(sprite);
  }
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
现在剩下要做的就是添加两个新方法，允许从对象池借用装饰精灵并返还。方法名称将遵循用于窗口精灵的命名约定。添加 `borrowDecoration()` 和 `returnDecoration()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.borrowWindow = function() {
  return this.windows.shift();
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.returnWindow = function(sprite) {
  this.windows.push(sprite);
};
// 实现
WallSpritesPool.prototype.borrowDecoration = function() {
  return this.decorations.shift();
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.returnDecoration = function(sprite) {
  this.decorations.push(sprite);
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
保存代码。

我们的对象池现在支持窗口和装饰两种切片类型。让我们回到之前添加到 Main类中的测试方法，并测试一切是否正常。

# 对象池的测试

前面我们建造了一面粗糙墙，完全由我们的对象池中的窗口组成。让我们稍微改变我们的测试代码，在每个窗口之间放置装饰切片。这将可以测试到是否真的可以从对象池中借用到窗口切片和装饰切片。

打开 Main.js 并从 `borrowWallSprites()` 方法中删除以下行：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.borrowWallSprites = function(num) {
  for (var i = 0; i &amp;lt; num; i++)
  {
    var sprite = this.pool.borrowWindow(); // 删除
    sprite.position.x = -32 + (i * 64);
    sprite.position.y = 128;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.wallSlices.push(sprite);

this.stage.addChild(sprite);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
用下面几行代替：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.borrowWallSprites = function(num) {
  for (var i = 0; i &amp;lt; num; i++)
  {
    if (i % 2 == 0) { // 添加
      var sprite = this.pool.borrowWindow(); // 添加
    } else { // 添加
      var sprite = this.pool.borrowDecoration(); // 添加
    } // 添加
    sprite.position.x = -32 + (i * 64);
    sprite.position.y = 192;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.wallSlices.push(sprite);

this.stage.addChild(sprite);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
上面的代码使用模运算符（％）来确保我们在循环的奇数次迭代借用一个窗口精灵，偶数次迭代时借用一个装饰精灵。这个简单的更改允许我们现在生成具有以下模式的测试砖块墙：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;window, decoration, window, decoration, window, decoration, window&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
现在转到 `returnWallSprites()` 方法并删除以下行：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.returnWallSprites = function() {
  for (var i = 0; i &amp;lt; this.wallSlices.length; i++)
  {
    var sprite = this.wallSlices[i]; // 删除
    this.stage.removeChild(sprite);
    this.pool.returnWindow(sprite);
  }&lt;/p&gt;

&lt;p&gt;this.wallSlices = [];
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
用下面几行代替：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.returnWallSprites = function() {
  for (var i = 0; i &amp;lt; this.wallSlices.length; i++)
  {
    var sprite = this.wallSlices[i];
    this.stage.removeChild(sprite);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (i % 2 == 0) { // 添加
  this.pool.returnWindow(sprite); // 添加
} else { // 添加
  this.pool.returnDecoration(sprite); // 添加
} // 添加
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;this.wallSlices = [];
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
我们再次使用了模运算符，这次确保我们将正确的精灵（窗口或装饰）返回给对象池。

保存代码。

刷新浏览器，然后使用 Chrome 的 JavaScript 控制台测试我们的对象池。通过在控制台窗口中输入以下内容来生成测试墙：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.borrowWallSprites(9);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
如果不出意外，那么你应该看到一个由窗户构成的测试墙，其间插有各种墙壁装饰，如管道和通风口。实际上，你的砖块墙应该类似于下面的图片，它是从我的开发机上截取的。

![tut3-more-object-pool-testing](https://img30.360buyimg.com/devfe/jfs/t1/14835/23/11449/35081/5c8f948eE577f4c48/924d41b53e1f6ded.png)

虽然我们目前只编写了一些简单的测试，但我们所做的并不是为了生成整个游戏地图。

使用以下调用将精灵返还到对象池：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.returnWallSprites();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
通过对 `borrowWallSprites()` 和 `returnWallSprites()` 进行一些手动调用来验证对象池是否完全正常工作（译者：建议多调用几次验证程序是否正常）。此外，使用控制台检查对象池的窗口和装饰数组的长度是否正常。

## 给你的对象池添加边缘

我们正一步步走向成功。精灵池目前使得我们可以创建一个原始的砖块墙，但它还没有墙的前后边缘。让我们继续添加这些切片类型。

在文本编辑器中打开 `WallSpritesPool.js` 并将以下两行添加到其构造函数中：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.createWindows();
  this.createDecorations();
  this.createFrontEdges(); // 添加
  this.createBackEdges(); // 添加
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
现在添加一个 `createFrontEdges()` 和一个 `createBackEdges()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.createDecorations = function() {
  this.decorations = [];&lt;/p&gt;

&lt;p&gt;this.addDecorations(6, &amp;ldquo;decoration_01&amp;rdquo;);
  this.addDecorations(6, &amp;ldquo;decoration_02&amp;rdquo;);
  this.addDecorations(6, &amp;ldquo;decoration_03&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;this.shuffle(this.decorations);
};
// 添加
WallSpritesPool.prototype.createFrontEdges = function() {
  this.frontEdges = [];&lt;/p&gt;

&lt;p&gt;this.addFrontEdgeSprites(2, &amp;ldquo;edge_01&amp;rdquo;);
  this.addFrontEdgeSprites(2, &amp;ldquo;edge_02&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;this.shuffle(this.frontEdges);
};
// 添加
WallSpritesPool.prototype.createBackEdges = function() {
  this.backEdges = [];&lt;/p&gt;

&lt;p&gt;this.addBackEdgeSprites(2, &amp;ldquo;edge_01&amp;rdquo;);
  this.addBackEdgeSprites(2, &amp;ldquo;edge_02&amp;rdquo;);&lt;/p&gt;

&lt;p&gt;this.shuffle(this.backEdges);
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
你应该能够轻松地看出来两种方法在干什么。第一个方法创建四个前边缘切片，其中两个使用精灵表的 `edge_01` 帧，另外两个使用 `edge_02`。第二个方法创建四个后边缘切片，并使用精灵表中与前边缘完全相同的帧。

四个前壁边缘可能看起来相当少，但它会绰绰有余，因为即使砖块墙长度很短也至少会占视口一半宽度。换句话说，我们在任何时候都不会使用超过四个前壁边缘。后墙边缘也是如此。

现在继续添加 `addFrontEdgeSprites()` 和 `addBackEdgeSprites()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.addDecorationSprites = function(amount, frameId) {
  for (var i = 0; i &amp;lt; amount; i++)
  {
    var sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
    this.decorations.push(sprite);
  }
};
// 添加
WallSpritesPool.prototype.addFrontEdgeSprites = function(amount, frameId) {
  for (var i = 0; i &amp;lt; amount; i++)
  {
    var sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
    this.frontEdges.push(sprite);
  }
};
// 添加
WallSpritesPool.prototype.addBackEdgeSprites = function(amount, frameId) {
  for (var i = 0; i &amp;lt; amount; i++)
  {
    var sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
    sprite.anchor.x = 1;
    sprite.scale.x = -1;
    this.backEdges.push(sprite);
  }
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
上面的代码没什么特殊的地方，但 `addBackEdgeSprites()` 方法中有几行值得注意：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
sprite.anchor.x = 1; // 高亮行
sprite.scale.x = -1;// 高亮行
this.backEdges.push(sprite);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
由于我们使用的是前边缘所使用的相同的精灵帧，我们需要水平翻转后边缘精灵，以便它们适当地贴合在砖块墙的的末端。下图能说明我的意思。它在翻转之前显示后边缘。它与墙跨没有正确连接，看起来不对。

![flipping-wall-edges-1](https://img11.360buyimg.com/devfe/jfs/t1/11227/6/11995/56141/5c8f9805E1ad7c9c8/fd79415b5830ed29.png)

然而，在翻转后的后边缘精灵，会紧贴着砖块墙的末端。如下图。

![flipping-wall-edges-2](https://img11.360buyimg.com/devfe/jfs/t1/20989/3/11470/60426/5c8f984bEf542d99e/fa35da3c1aed568a.png)

翻转精灵很容易。我们只需使用 `PIXI.Sprite` 类的 `scale` 属性即可。 `scale` 属性具有 x 和 y 值，可以调整该值以更改 sprite 的大小。但是，将 `scale.x` 值设置为 -1，我们可以强制精灵水平翻转而不是缩放。

Pixi 的 `PIXI.Sprite` 类还提供了一个 `anchor` 属性，用于定义 `sprite` 的锚点（轴心点）。默认情况下，精灵的锚点在左上角。你可以设置锚点的 x 和 y 位置以调整精灵的锚。`anchor.set()` 方法设置用于 x 和 y 位置的 **比率值**，`0,0` 表示精灵的左上角，`1,1` 表示其右下角。

在我们的教程中只使用默认值，这意味着所有定位都在精灵的左上角。然而，通过水平翻转边缘精灵，我们也翻转了它们的锚点的位置。换句话说，在水平翻转精灵之后，它的原点会改变到它的右上角，这不是我们想要的。为了解决这个问题，我们在将它们水平翻转之前将精灵的原点设置为右上角。这样，翻转后，它将被正确设置到左上角。

好的，现在让我们来编写可以借用边缘并返还给对象池的方法。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.returnDecoration = function(sprite) {
  this.decorations.push(sprite);
};
// 添加
WallSpritesPool.prototype.borrowFrontEdge = function() {
  return this.frontEdges.shift();
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.returnFrontEdge = function(sprite) {
  this.frontEdges.push(sprite);
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.borrowBackEdge = function() {
  return this.backEdges.shift();
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.returnBackEdge = function(sprite) {
  this.backEdges.push(sprite);
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
保存你的代码。

## 构建第一个完整的砖块墙

我们的精灵池现在支持足够多的垂切片类型，可以用来构建完整的砖块墙了。记住，一块完整的砖块墙包括 **前边缘**，**中间部分** 和 **后边缘**。中间部分至少应包括 **窗户** 和墙壁 **装饰**。一些砖块墙也可能包括一个 **台阶**。

让我们回到 Main 类，并编写一些测试代码，在我们的视口中绘制一个完整的砖块墙。

首先，删除以前的测试方法。打开 Main.js 并删除 `borrowWallSprites()` 和 `returnWallSprites()`。

我们将实现一个名为 `generateTestWallSpan()` 的新方法，用它来生成七个切片宽度的砖块墙。我们将把所有切片存放在一张表里面。首先添加以下内容：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.generateTestWallSpan = function() {
  var lookupTable = [
    this.pool.borrowFrontEdge,  // 第一个切片
    this.pool.borrowWindow,     // 第二个切片
    this.pool.borrowDecoration, // 第三个切片
    this.pool.borrowWindow,     // 第四个切片
    this.pool.borrowDecoration, // 第五个切片
    this.pool.borrowWindow,     // 第六个切片
    this.pool.borrowBackEdge    // 第七个切片
  ];
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
这张表是一个存放函数引用的数组。数组中的每个索引代表七个切片中的一个。第一个索引表示墙的前边缘，最后一个表示后边缘。中间的指数代表代表墙壁中段的五个切片。

每个索引都包含对构建砖块墙所需的对象池中对应的引用。例如，第一个索引包含对池的 `borrowFrontEdge()` 方法的引用。第二个索引包含对 `borrowWindow()` 的引用，第三个索引包含对 `borrowDecoration()` 的引用。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.generateTestWallSpan = function() {
  var lookupTable = [
    this.pool.borrowFrontEdge,  // 1st slice
    this.pool.borrowWindow,     // 2nd slice
    this.pool.borrowDecoration, // 3rd slice
    this.pool.borrowWindow,     // 4th slice
    this.pool.borrowDecoration, // 5th slice
    this.pool.borrowWindow,     // 6th slice
    this.pool.borrowBackEdge    // 7th slice
  ];
  // 添加
  for (var i = 0; i &amp;lt; lookupTable.length; i++)
  {
    var func = lookupTable[i];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sprite = func.call(this.pool);
sprite.position.x = 32 + (i * 64);
sprite.position.y = 128;

this.wallSlices.push(sprite);

this.stage.addChild(sprite);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
在循环内部，我们的代码获取对应切片的借用方法的引用，并将其存储在名为 `func` 的局部变量中：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var func = lookupTable[i];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
一旦我们有了这个正确的引用，就使用以下方法调用它：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var sprite = func.call(this.pool);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
`call()` 是一种原生的 JavaScript 方法，可用来从函数引用调用函数。例如，在循环的第一次迭代中，`func` 变量将指向精灵池的 `borrowFrontEdge()` 方法。因此，调用 `func` 的 `call()` 方法与下面的代码等价：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this.pool.borrowFrontEdge()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
有了生成测试墙的方法，我们也需要编写另一个名为 `clearTestWallSpan()` 的清除墙的方法。此方法将从舞台移除砖块墙并将切片返还到对象池中。

在你的文件中加入下面的代码：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.clearTestWallSpan = function() {
  var lookupTable = [
    this.pool.returnFrontEdge,  // 1st slice
    this.pool.returnWindow,     // 2nd slice
    this.pool.returnDecoration, // 3rd slice
    this.pool.returnWindow,     // 4th slice
    this.pool.returnDecoration, // 5th slice
    this.pool.returnWindow,     // 6th slice
    this.pool.returnBackEdge    // 7th slice
  ];&lt;/p&gt;

&lt;p&gt;for (var i = 0; i &amp;lt; lookupTable.length; i++)
  {
    var func = lookupTable[i];
    var sprite = this.wallSlices[i];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.stage.removeChild(sprite);
func.call(this.pool, sprite);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;this.wallSlices = [];
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
我们再一次使用了一张表。但是这次我们存储的是对应的切片返还方法的引用。例如，我们知道砖块墙的第一个切片是墙的前边缘。因此，存储在表中的第一个方法是 `returnFrontEdge()`。

另外，请注意，这次使用原生 JavaScript `call()` 方法时，我们将第二个参数传递给它。第二个参数是我们想要返还给池子的精灵。

保存更改并刷新浏览器。让我们看看完整的砖块墙是什么样的。

打开 Chrome 的 JavaScript 控制台并执行生成砖块墙的代码：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.generateTestWallSpan();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
您应该会看到七个切片宽的砖块墙。还有前后边缘。你的浏览器窗口应类似于下面的屏幕截图。

![wall-span-screenshot-1](https://img10.360buyimg.com/devfe/jfs/t1/31494/17/6527/54099/5c904c26E4099c026/3b44cd4397cdfbee.png)

七个切片都是从我们的对象池中借来的。让我们通过在控制台中输入以下内容来返还它们：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.clearTestWallSpan();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
切片精灵应该会被从舞台上移除并返回到你的对象池中。

再次生成砖块墙：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.generateTestWallSpan();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
你会再次看到砖块墙，但这次你看到墙壁上的装饰与上次不同，窗口类型也可能会有所不同，甚至前后边缘的外观也会发生变化。

![wall-span-screenshot-2](https://img11.360buyimg.com/devfe/jfs/t1/20076/19/11507/48534/5c904d00E4af6178d/7fc329522b49ae99.png)

这些差异是由于我们这次借用了不同的墙片造成的。我们之前的切片返回到了每个对象池的数组 **最后面**，而借用的精灵总是来自我们数组的 **前面**。这样效果会比较好，因为玩家很难准确预测从池中获取每个切片类型的样子。它会让我们游戏地图的墙块随机出现，这正是我们想要的。

## 给砖块墙添加台阶

希望你能从上面的实现代码中得到成就感。我们能够使用对象池构建完整的砖块墙。现在剩下要做的就是为对象池添加台阶的支持。让我们继续吧。

返回文本编辑器并确保 `WallSpritesPool.js` 已打开。

添加下面一行到构造函数中。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function WallSpritesPool() {
  this.createWindows();
  this.createDecorations();
  this.createFrontEdges();
  this.createBackEdges();
  this.createSteps(); // 添加
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
现在来实现 `createSteps()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.createSteps = function() {
  this.steps = [];
  this.addStepSprites(2, &amp;ldquo;step_01&amp;rdquo;);
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
并且添加一个 `addStepSprites()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.addStepSprites = function(amount, frameId) {
  for (var i = 0; i &amp;lt; amount; i++)
  {
    var sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
    sprite.anchor.y = 0.25;
    this.steps.push(sprite);
  }
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
台阶很少会出现，虽然我们将在精灵池中只使用两个。但说实话，但已经足够了。

此外，就像后边缘切片类型一样，我们使用了 anchor 属性来改变精灵的锚点。这次我们通过向下移动 64 像素来改变锚点的垂直位置。请记住，使用锚属性的值是比率。每个切片的高度为 256 像素，将锚点的 y 位置向下移动 64 个像素对应的比率为 0.25。

那么为什么要改变锚属性呢？好吧，当我们最终实际生成游戏地图时，一定范围的所有切片将使用相同的 y 位置以确保正确对齐。但是，台阶切片位图的设计使其成为特例 — 它将无法与砖块墙的其他切片正确对齐。你可以在下图中发现这种情况，其中所有切片（包括台阶）具有相同的 y 位置并且其锚点设置在左上角。

![wall-step-anchor-1](https://img13.360buyimg.com/devfe/jfs/t1/10525/31/15123/56353/5c905364E8be71317/cf32228b28880ba4.png)

如你所见，台阶的垂直位置显然是不正确的。但是，通过将其锚点向下移动 64 像素，我们可以强制它在砖块墙内正确展示。下图中就是设置过的，其中每个切片（包括台阶）仍然 **共享** 相同的 y 位置，但由于其锚点已被移动，步骤切片现在正确地位于砖块墙内。

![wall-step-anchor-2](https://img30.360buyimg.com/devfe/jfs/t1/24325/19/11530/56607/5c905406Ea283c26c/180e08debc8d1226.png)

现在我们需要做的就是提供允许我们从对象池借用并返回一个步骤的方法。添加以下 `borrowStep()` 和 `returnStep()` 方法：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WallSpritesPool.prototype.borrowStep = function() {
  return this.steps.shift();
};&lt;/p&gt;

&lt;p&gt;WallSpritesPool.prototype.returnStep = function(sprite) {
  this.steps.push(sprite);
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
将更改保存到文件。对象池类现已完成了。

## 测试砖块墙的台阶

这一节的教程即将完成。让我们通过生成包含台阶的测试砖块墙来结束它。

打开 Main.js 并删除 `generateTestWallSpan()` 方法中的代码。将其替换为以下内容：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.generateTestWallSpan = function() {
  var lookupTable = [
    this.pool.borrowFrontEdge,  // 1st slice
    this.pool.borrowWindow,     // 2nd slice
    this.pool.borrowDecoration, // 3rd slice
    this.pool.borrowStep,       // 4th slice
    this.pool.borrowWindow,     // 5th slice
    this.pool.borrowBackEdge    // 6th slice
  ];&lt;/p&gt;

&lt;p&gt;var yPos = [
    128, // 1st slice
    128, // 2nd slice
    128, // 3rd slice
    192, // 4th slice
    192, // 5th slice
    192  // 6th slice
  ];&lt;/p&gt;

&lt;p&gt;for (var i = 0; i &amp;lt; lookupTable.length; i++)
  {
    var func = lookupTable[i];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sprite = func.call(this.pool);
sprite.position.x = 64 + (i * 64);
sprite.position.y = yPos[i];

this.wallSlices.push(sprite);

this.stage.addChild(sprite);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
`generateTestWallSpan()` 几乎与前一版相同。这次墙只有六个切片宽，我们还添加了第二个名为 `yPos` 的数组。

如果查看这张表，您将发现第 4 个索引表示台阶切片。请记住，该步骤可让玩家直接跌落到正下方的墙面上。如果你回想一下教程的开头，你应该记住，当我们处理一个步骤时，我们实际处理的是两个连接在一起的独立砖块墙。第一个砖块墙将高于第二个，台阶切片本身将属于第二个砖块墙。

两个砖块墙之间的高度差异由我们的 yPos 数组处理。它对于我们的每个切片都有一个 y 位置。前三个切片 y 都是 128 个像素，而剩余的切片是 192个像素。

让我们转到我们的 `clearTestWallSpan()` 方法。从现有版本的方法中删除代码，并将其替换为以下内容：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.clearTestWallSpan = function() {
  var lookupTable = [
    this.pool.returnFrontEdge,  // 1st slice
    this.pool.returnWindow,     // 2nd slice
    this.pool.returnDecoration, // 3rd slice
    this.pool.returnStep,       // 4th slice
    this.pool.returnWindow,     // 5th slice
    this.pool.returnBackEdge    // 6th slice
  ];&lt;/p&gt;

&lt;p&gt;for (var i = 0; i &amp;lt; lookupTable.length; i++)
  {
    var func = lookupTable[i];
    var sprite = this.wallSlices[i];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.stage.removeChild(sprite);
func.call(this.pool, sprite);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;this.wallSlices = [];
};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
如你所见，表中包含对将每个切片返还到对象池所需的所有方法的引用，包括台阶。

保存更改并刷新浏览器。

在 JavaScript 控制台中输入以下内容：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.generateTestWallSpan();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
您应该会在屏幕上看到一个带有台阶的墙。它应该看起来像这样：

![wall-step-screenshot](https://img14.360buyimg.com/devfe/jfs/t1/24246/9/11462/69686/5c905719E86dbd531/38dfad19122dfe1f.png)

再返还整个砖块墙给对象池：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.clearTestWallSpan();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
多试几次生成砖块墙然后返还到对象池，确保一切都正常。

## 整理代码

我们不断地测试对象池，现在它已经成型。为了准备本系列的最后一个教程，我们现在从 Main 类中删除测试代码：

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Main.prototype.spriteSheetLoaded = function() {
  this.scroller = new Scroller(this.stage);
  requestAnimationFrame(this.update.bind(this));&lt;/p&gt;

&lt;p&gt;this.pool = new WallSpritesPool();
  this.wallSlices = [];
};
```&lt;/p&gt;

&lt;p&gt;还要完全删除 &lt;code&gt;generateTestWallSpan()&lt;/code&gt; 和 &lt;code&gt;clearTestWallSpan()&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;现在保存您的更改。&lt;/p&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;感谢你能坚持到这里。本教程已经涉及到了大量的内容。我们已经讨论了滚动游戏地图的各种技术点，并了解了为什么选择使用对象池。&lt;/p&gt;

&lt;p&gt;虽然本教程很长，但对象池的概念实际上相当简单。不过有人可能会很容易陷入到一些实现细节中，但记住最重要的一点对象池只一个非常简单的 API：有一组从池中借用精灵，另一组返还这些精灵。&lt;/p&gt;

&lt;p&gt;我们还学到了更多关于 pixi.js 的知识，包括精灵表和 PIXI.Sprite 类的其它功能。此外，我们也介绍了 GPU 加速的好处，以及为什么使用精灵表可以带来巨大的性能提升。&lt;/p&gt;

&lt;p&gt;虽然我们还没有真正地开始构建滚动游戏地图，但我们已经编写了一些代码来生成一些测试砖块墙。这应该有助于你了解如何使用对象池，也可以帮助你熟悉砖块墙的结构和游戏地图。&lt;/p&gt;

&lt;h2 id=&#34;下期预告&#34;&gt;下期预告&lt;/h2&gt;

&lt;p&gt;下一节中我们将真正的添加流动游戏中的第三层。和前两层不一样，第三层将组成整个游戏地图所需要的砖块墙。这些切片都将从我们的对象池中借取。&lt;/p&gt;

&lt;p&gt;与往常一样，GitHub上提供了本系列和之前教程的 &lt;a href=&#34;https://github.com/ccaleb/pixi-parallax-scroller&#34;&gt;源代码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;很快你将开始教程的的 第四部分，也是最后一部分。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Pixi.js 构建一个视差滚动器（第二篇）</title>
      <link>https://keelii.com/2019/03/17/building-a-parallax-scroller-with-pixijs-cn-2/</link>
      <pubDate>Sun, 17 Mar 2019 19:20:04 -0700</pubDate>
      
      <guid>https://keelii.com/2019/03/17/building-a-parallax-scroller-with-pixijs-cn-2/</guid>
      <description>

&lt;h2 id=&#34;翻译对照&#34;&gt;翻译对照&lt;/h2&gt;

&lt;p&gt;原文：
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=5226&#34;&gt;PART 1&lt;/a&gt;・
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=5666&#34;&gt;PART 2&lt;/a&gt;・
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=6496&#34;&gt;PART 3&lt;/a&gt;・
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=7046&#34;&gt;PART 4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;译文：
&lt;a href=&#34;https://keelii.com/2019/03/16/building-a-parallax-scroller-with-pixijs-cn-1/&#34;&gt;第一篇&lt;/a&gt;・
&lt;a href=&#34;https://keelii.com/2019/03/17/building-a-parallax-scroller-with-pixijs-cn-2/&#34;&gt;第二篇&lt;/a&gt;・
&lt;a href=&#34;https://keelii.com/2019/03/19/building-a-parallax-scroller-with-pixijs-cn-3/&#34;&gt;第三篇&lt;/a&gt;・
第四篇&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;关注 &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=chriscaleb&#34;&gt;@chriscaleb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个系列的教程已经更新到了 &lt;a href=&#34;http://www.pixijs.com/&#34;&gt;PixiJS v4&lt;/a&gt; 版本。&lt;/p&gt;

&lt;p&gt;在这个系列教程中我们将探索如何构建一个类似 &lt;a href=&#34;http://www.adamatomic.com/canabalt/&#34;&gt;Canabalt&lt;/a&gt; 和 &lt;a href=&#34;https://chrome.google.com/webstore/detail/monster-dash/cknghehebaconkajgiobncfleofebcog?hl=en&#34;&gt;Monster Dash&lt;/a&gt; 的视差滚动地图游戏界面。第一篇介绍了 pixi.js 的渲染引擎并且涉及到了视差滚动的基础知识。现在我们将在上一篇的基础之上添加 &lt;strong&gt;视口&lt;/strong&gt; 的概念。&lt;/p&gt;

&lt;h3 id=&#34;你将学到什么&#34;&gt;你将学到什么…&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如何扩展 pixi.js 的 &lt;strong&gt;展示对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;JavaScript 中的面向对象基础（译者使用 ES 6 Class 重构了这个游戏 &lt;a href=&#34;https://github.com/keelii/parallax-scroller-cn&#34;&gt;源代码&lt;/a&gt;，看起来更直观）&lt;/li&gt;
&lt;li&gt;如何在你的滚动器中添加 &lt;strong&gt;视口&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;预备知识&#34;&gt;预备知识…&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;对面向对象有基本的概念&lt;/li&gt;
&lt;li&gt;pixi.js 基础&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你将以第一篇教程中的代码为基础，或者直接下载上篇教程中的 &lt;a href=&#34;http://www.yeahbutisitflash.com/?p=5226&#34;&gt;源代码&lt;/a&gt;，另外整个教程的完全源代码也在 &lt;a href=&#34;https://github.com/ccaleb/pixi-parallax-scroller/tree/master/tutorial-2&#34;&gt;github&lt;/a&gt; 上可以找到。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yeahbutisitflash.com/pixi-parallax-scroller/tutorial-1/index.html&#34;&gt;&lt;img src=&#34;https://img10.360buyimg.com/devfe/jfs/t1/25206/13/10616/142679/5c887df7E7c1fa38a/eab39f5f7ab1cc6d.png&#34; alt=&#34;ps-tut1-screenshot1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作为提示，点击上面的图片，将会加载当前版本的视差滚动，目前来说只有两个层，我们将添加每三个更复杂的层。与此同时，我们将通过添加视口的概念来添加第三层。我们还会执行一些重要代码重构，以便将滚动器封装在类中。&lt;/p&gt;

&lt;p&gt;虽然本教程非常针对那些对面向对象有基础概念的初学者级别，如这些概念让您感到不舒服，也不用担心，因为我仍然会为那些不熟悉这些枞的的人提供足够的指导。&lt;/p&gt;

&lt;h2 id=&#34;起步&#34;&gt;起步&lt;/h2&gt;

&lt;p&gt;如果你还没有看过第一篇教程，我建议你应该从那篇开始。&lt;/p&gt;

&lt;p&gt;还有一点值得提醒的是，为了能够测试你的代码，你需要开启一个本地的 web 服务器。如果你还没有做这一步，那么可能参考上一篇教程中的章节建立好自己的 web 服务器。&lt;/p&gt;

&lt;h2 id=&#34;扩展-pixi-js-的-展示对象&#34;&gt;扩展 pixi.js 的 &lt;strong&gt;展示对象&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;正如我们之前发现的，pixi.js 提供了几种可使用的 &lt;strong&gt;展示对象&lt;/strong&gt; 类型。如果你还记得的话，我们在使用 &lt;code&gt;PIXI.extras.TilingSprite&lt;/code&gt; 来满足我们的需求之前，先简单地使用了 &lt;code&gt;PIXI.Sprite&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这两个类共享许多公用的功能。例如，它们都为您提供位置（position），宽度（width），高度（height）和 alpha 属性。此外，两者都可以通过 &lt;code&gt;addChild()&lt;/code&gt; 方法添加到容器中。事实上，&lt;code&gt;PIXI.Container&lt;/code&gt; 类本身就是一个 &lt;strong&gt;展示对象&lt;/strong&gt;，它还提供了许多 Sprite 和 TilingSprite 类都能使用的属性。&lt;/p&gt;

&lt;p&gt;所有这些公用的功能都来自于 &lt;strong&gt;继承（inheritance）&lt;/strong&gt; 的魔力。它使得类可以继承和扩展功能到其它类上。为了让你能理解它，可以参考下面的示意图，它将为你展示 pixi.js 中提供的大多数展示对象&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img14.360buyimg.com/devfe/jfs/t1/32241/35/6163/21482/5c8c93a6E0674998d/e778a3262a7f0f86.png&#34; alt=&#34;ps-tut2-screenshot1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从上面的示意图中，我们可以看出最基础的类型是 PIXI.DisplayObject 类，所有其它类都从它继承而来。这个类是将对象呈现到屏幕所必须需的元素。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当我说 &lt;strong&gt;展示对象&lt;/strong&gt; 时，并非指 &lt;code&gt;PIXI.DisplayObject&lt;/code&gt; 这个类。而当使用 &lt;code&gt;PIXI.DisplayObject&lt;/code&gt; 这个说法时，却表示所有继承自它的对象。本质上讲，当我使用 &lt;strong&gt;展示对象&lt;/strong&gt; 这一术语时，我指的是可以通过 pixi.js 呈现给屏幕的 &lt;strong&gt;任何对象&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下一层是 &lt;code&gt;PIXI.Container&lt;/code&gt;，它允许对象充当其他展示对象的 &lt;strong&gt;容器&lt;/strong&gt;。我们在第一个教程中使用的 &lt;code&gt;addChild()&lt;/code&gt; 方法是 &lt;code&gt;PIXI.Container&lt;/code&gt; 这个类提供的实例方法，也可以通过 &lt;code&gt;PIXI.Sprite&lt;/code&gt; 和 &lt;code&gt;PIXI.TilingSpite&lt;/code&gt; 继承获得。&lt;/p&gt;

&lt;p&gt;本质上讲，继承树中的每个类都是它继承的（父）类的 &lt;strong&gt;更特殊&lt;/strong&gt; 版本（译者：面向对象的 &lt;strong&gt;具体化&lt;/strong&gt; 与 &lt;strong&gt;泛化&lt;/strong&gt; 概念）。好的一点是我们可以使用继承来创建我们自己的自定义的展示对象。换而言之，我们可以为每个视差滚动器中的元素编写专用的类，并让 pixi.js 处理它们就像是处理其它展示对象一样。这给使我们封装代码更简单，代码也更多漂亮、整洁。&lt;/p&gt;

&lt;h3 id=&#34;制作远景层展示对象&#34;&gt;制作远景层展示对象&lt;/h3&gt;

&lt;p&gt;让我们开始制作远景层吧。&lt;/p&gt;

&lt;p&gt;打开index.html文件，在 &lt;code&gt;init()&lt;/code&gt; 函数中查找创建和设置图层的代码。这是你要找的东西：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);	
far = new PIXI.extras.TilingSprite(farTexture, 512, 256);
far.position.x = 0;
far.position.y = 0;
far.tilePosition.x = 0;
far.tilePosition.y = 0;
stage.addChild(far);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理想的情况是，我们可以创建一个代表远景层的类，并把大部分实现细节隐藏在类中。因此，我们希望找到以下代码，而不是上面的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;far = new Far();
stage.addChild(far);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码量大幅减少了吧？另外，我认为它比我们原来的尝试更具可读性。&lt;/p&gt;

&lt;p&gt;我们通过创建一个代表我们的滚动条远景层的名为 Far 的类来实现这一目标。在项目的根文件夹中创建一个新文件，并将其命名为 &lt;code&gt;Far.js&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;现在定义一个名为 Far 的函数，它将表示我们类的构造函数：&lt;/p&gt;

&lt;p&gt;（译者：原作者使用了 ES 5 和 prototype 来实现 JavaScript 中的继承，看起来可能没那么直观，可以参考我自己实现的 &lt;a href=&#34;https://github.com/keelii/parallax-scroller-cn&#34;&gt;ES 6 版&lt;/a&gt;的代码）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Far(texture, width, height) {
  PIXI.extras.TilingSprite.call(this, texture, width, height);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在构造函数下面添加以下行，然后保存文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Far.prototype = Object.create(PIXI.extras.TilingSprite.prototype);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码继承了 &lt;code&gt;PIXI.extras.TilingSprite&lt;/code&gt; 类的功能。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;构造函数是一种特殊类型的函数，用于创建类实例。在 JavaScript 中，构造函数的名称也用于指定类的名称（译者：ES 6 中的类有专门的 construct 方法）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么为什么 Far 类继承自 &lt;code&gt;PIXI.TilingSprite&lt;/code&gt; 呢？好吧，如果你还记得第一个教程，我们使用 &lt;code&gt;TilingSprite&lt;/code&gt; 实例来表示每个视差层。因此，在更具体化的类中使用这些功能是有必要的。本质上讲，我们所说的是：Far 类是 &lt;code&gt;PIXI.extras.TilingSprite&lt;/code&gt; 的一个更特殊的版本。&lt;/p&gt;

&lt;p&gt;因为 Far 类继承自 &lt;code&gt;PIXI.extras.TilingSprite&lt;/code&gt;，所以我们要记得去初始化&lt;code&gt;TilingSprite&lt;/code&gt; 类的功能。这是通过从构造函数中调用 &lt;code&gt;TilingSprite&lt;/code&gt; 的构造函数来完成的。我高亮显示了以下代码行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Far(texture, width, height) {
  PIXI.extras.TilingSprite.call(this, texture, width, height); // 这一行
}

Far.prototype = Object.create(PIXI.extras.TilingSprite.prototype);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样做是因为我们希望 Far 类继承 &lt;code&gt;TilingSprite&lt;/code&gt; 的所有功能。由于 &lt;code&gt;TilingSprite&lt;/code&gt; 需要将三个参数传递给它的构造函数，我们需要确保我们自己的类也接受这些参数并使用它们初始化瓦片精灵。以下是高亮显示参数的类：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 注意 texture, width, height 三个参数
function Far(texture, width, height) {
  PIXI.extras.TilingSprite.call(this, texture, width, height);
}

Far.prototype = Object.create(PIXI.extras.TilingSprite.prototype);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们还有一些额外的功能可以添加 Far 类中，但实际上已经可以开始将它集成到 &lt;code&gt;index.html&lt;/code&gt; 页面中了。&lt;/p&gt;

&lt;h3 id=&#34;实例化你的远景-far-层类&#34;&gt;实例化你的远景（Far）层类&lt;/h3&gt;

&lt;p&gt;返回你的 &lt;code&gt;index.html&lt;/code&gt; 页面。&lt;/p&gt;

&lt;p&gt;要使用 Far 类，您需要引用它的源文件。在页面正文顶部附近添加以下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body onload=&amp;quot;init();&amp;quot;&amp;gt;
  &amp;lt;div align=&amp;quot;center&amp;quot;&amp;gt;
    &amp;lt;canvas id=&amp;quot;game-canvas&amp;quot; width=&amp;quot;512&amp;quot; height=&amp;quot;384&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.0.0/pixi.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;Far.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;!--这里--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在向下滚动并删除以下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
far = new PIXI.extras.TilingSprite(farTexture, 512, 256);  // 删除此行
far.position.x = 0;
far.position.y = 0;
far.tilePosition.x = 0;
far.tilePosition.y = 0;
stage.addChild(far);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;替换成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
far = new Far(farTexture, 512, 256);  // 新行
far.position.x = 0;
far.position.y = 0;
far.tilePosition.x = 0;
far.tilePosition.y = 0;
stage.addChild(far);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好吧，我承认。目前这似乎并没有太大的改进，但我们现在可以开始在 Far 类中直接隐藏更多代码，让我们继续吧。&lt;/p&gt;

&lt;h3 id=&#34;封装位置相关代码&#34;&gt;封装位置相关代码&lt;/h3&gt;

&lt;p&gt;在 &lt;code&gt;index.html&lt;/code&gt; 中，我们当前设置了 far 层的 &lt;code&gt;position&lt;/code&gt; 和 &lt;code&gt;tilePosition&lt;/code&gt; 属性。让我们删除它，并将其封装在我们的 Far 类中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
far = new Far(farTexture, 512, 256);
far.position.x = 0;  // 删除
far.position.y = 0;  // 删除
far.tilePosition.x = 0;  // 删除
far.tilePosition.y = 0;  // 删除
stage.addChild(far);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存更改并打开 Far.js 文件。现在直接在类的构造函数中设置图层的位置和tilePosition 属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Far(texture, width, height) {
  PIXI.extras.TilingSprite.call(this, texture, width, height);
	
  this.position.x = 0;
  this.position.y = 0;
  this.tilePosition.x = 0;
  this.tilePosition.y = 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你不熟悉面向对象的 JavaScript 或面向对象编程，那么你可能会好奇 &lt;code&gt;this&lt;/code&gt; 关键字在上面的代码中的用途是什么。基本上可以这么理解，它可以让你引用类的已创建实例。通过 &lt;code&gt;this&lt;/code&gt;，我们可以引用该实例的所有 &lt;strong&gt;属性&lt;/strong&gt; 和 &lt;strong&gt;方法&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;因为 Far 类继承自 &lt;code&gt;PIXI.extras.TilingSprite&lt;/code&gt;，它还具有 &lt;code&gt;TilingSprite&lt;/code&gt; 的所有 &lt;strong&gt;属性&lt;/strong&gt; 和 &lt;strong&gt;方法&lt;/strong&gt;，包括 &lt;code&gt;position&lt;/code&gt; 和 &lt;code&gt;tilePosition&lt;/code&gt;。要访问这些属性，我们只需使用&lt;code&gt;this&lt;/code&gt; 关键字。这是再次设置图层 x 位置的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.position.x = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还应注意，&lt;code&gt;this&lt;/code&gt; 关键字还用于引用新添加到类中的属性或方法。&lt;/p&gt;

&lt;p&gt;现在保存更改并在浏览器中测试代码。一切都应按预期运行。另外，请查看 Chrome 的 JavaScript 控制台，确保没有错误。&lt;/p&gt;

&lt;h3 id=&#34;封装层的纹理&#34;&gt;封装层的纹理&lt;/h3&gt;

&lt;p&gt;好的，我们应该从哪里开始呢。如果你回顾一下 index.html 页面，你应该看到代码好像开始变得更加简洁了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);	
far = new Far(farTexture, 512, 256);
stage.addChild(far);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但仍有改进的余地。毕竟，如果我们可以直接在 Far 类中隐藏我们的定位代码，那么为什么我们不能把纹理的逻辑也放在 Far 类中呢？&lt;/p&gt;

&lt;p&gt;切换到 &lt;code&gt;Far.js&lt;/code&gt; 文件并在构造函数的开头添加一行以创建图层的纹理：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Far(texture, width, height) {
  var texture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;); // 添加
  PIXI.extras.TilingSprite.call(this, texture, width, height);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在显式地将纹理的宽度和高度传递给 &lt;code&gt;TilingSprite&lt;/code&gt; 的构造函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Far(texture, width, height) {
  var texture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
  PIXI.extras.TilingSprite.call(this, texture, 512, 256); // 512, 256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于我们现在直接在类中处理纹理，因此实际上不需要将纹理，宽度和高度参数传递给构造函数。删除所有三个参数并保存您的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Far(texture, width, height) { // 删除 texture, width, height
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你的构造函数现在应该是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Far() {
  var texture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
  PIXI.extras.TilingSprite.call(this, texture, 512, 256);

  this.position.x = 0;
  this.position.y = 0;
  this.tilePosition.x = 0;
  this.tilePosition.y = 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;剩下要做的就是返回到你的 index.html 文件并删除我们之前创建的纹理并传递给 far的构造函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
far = new Far(farTexture, 512, 256);
stage.addChild(far);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;far = new Far();
stage.addChild(far);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比以前简洁了，对吧？我们所有层的丑陋实现细节现在都安全地隐藏在 Far 类中。&lt;/p&gt;

&lt;p&gt;保存 index.html 和 Far.js ，然后在 Chrome 中测试最新版本的代码。&lt;/p&gt;

&lt;h3 id=&#34;同样的方法重构中间层&#34;&gt;同样的方法重构中间层&lt;/h3&gt;

&lt;p&gt;我花了一些时间引导你完成创建 Far类所需的步骤。该类继承自&lt;code&gt;PIXI.extras.TilingSprite&lt;/code&gt;，其行为与任何其他 pixi.js 展示对象相同。虽然我们尚未完成，但我们将暂时停止一下并应用我们学到的知识来创建一个代表视差滚动器中的中间层（Mid）的类。&lt;/p&gt;

&lt;p&gt;创建一个名为 &lt;code&gt;Mid.js&lt;/code&gt; 的新文件，并开始向其添加以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Mid() {
}

Mid.prototype = Object.create(PIXI.extras.TilingSprite.prototype);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样在构造函数中，创建中间层的纹理并设置其定位属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Mid() {
  var texture = PIXI.Texture.fromImage(&amp;quot;resources/bg-mid.png&amp;quot;);
  PIXI.extras.TilingSprite.call(this, texture, 512, 256);

  this.position.x = 0;
  this.position.y = 128;
  this.tilePosition.x = 0;
  this.tilePosition.y = 0;
}

Mid.prototype = Object.create(PIXI.extras.TilingSprite.prototype);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存 Mid.js 文件，然后转到 index.html 并引用 Mid 类的源文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.0.0/pixi.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;Far.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;Mid.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!--添加--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成后，向下滚动到 &lt;code&gt;init()&lt;/code&gt; 函数并删除以下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;far = new Far();
stage.addChild(far);

var midTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-mid.png&amp;quot;); // 删除
mid = new PIXI.extras.TilingSprite(midTexture, 512, 256);// 删除
mid.position.x = 0;// 删除
mid.position.y = 128;// 删除
mid.tilePosition.x = 0;// 删除
mid.tilePosition.y = 0;// 删除
stage.addChild(mid);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用这一行代码替换它们：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;far = new Far();
stage.addChild(far);

mid = new Mid(); // 此行
stage.addChild(mid);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存 Mid.js 文件并在浏览器中测试最新版本。像往常一样，在运行时检查是否有 JavaScript 错误，并确保滚动器仍然按预期执行。&lt;/p&gt;

&lt;h3 id=&#34;实现一个-update-方法&#34;&gt;实现一个 update() 方法&lt;/h3&gt;

&lt;p&gt;我们已经对代码库进行了大量的重构，但仍然有一些事情可以做。返回 index.html 文件，查看动画主更新逻辑。它应该如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  far.tilePosition.x -= 0.128;
  mid.tilePosition.x -= 0.64;

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;update 方法中的前两行通过更新其 tilePosition 属性来滚动我们的图层。但是，我们的代码目前存在一些问题：通过直接更改 &lt;code&gt;tilePosition&lt;/code&gt; 属性，我们将暴露 Mid 和 Far 类的内部 &lt;strong&gt;实现&lt;/strong&gt;（译者：类的外部不应该知道类的具体实现细节，只需要控制类的行为）。这违背了面向对象的封装原则。&lt;/p&gt;

&lt;p&gt;理想情况下，我们希望在类中隐藏具体细节。如果两个类只有一个实际为我们执行滚动的 &lt;code&gt;update()&lt;/code&gt; 方法，那么我们的代码会更易读。换句话说，对于我们的主循环来说，这样似乎更合适：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  far.update();
  mid.update();

  renderer.render(stage);

  requestAnimFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;值得庆幸的是，这样的改变是微不足道的。我们将向 Far 类和 Mid 类添加一个 &lt;code&gt;update()&lt;/code&gt; 方法，每个类都会一点点的滚动。&lt;/p&gt;

&lt;p&gt;从 Far 类开始，打开 Far.js 并向其添加以下方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Far.prototype = Object.create(PIXI.extras.TilingSprite.prototype);

Far.prototype.update = function() {
  this.tilePosition.x -= 0.128;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该方法（update）的主体应该看起来很熟悉。它只是将纹理的平铺位置移动 0.128 像素，这正是我们在 index.html 的主循环中所做的。&lt;/p&gt;

&lt;p&gt;好的，保存更改并向Mid.js添加类似的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Mid.prototype = Object.create(PIXI.extras.TilingSprite.prototype);

Mid.prototype.update = function() {
  this.tilePosition.x -= 0.64;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;两个方法的唯一区别是 Mid 类中的 &lt;code&gt;update()&lt;/code&gt; 方法的滚动量更多。&lt;/p&gt;

&lt;p&gt;保存更改并返回 index.html。现在我们需要做的就是从主循环中调用每个层的 &lt;code&gt;update()&lt;/code&gt; 方法。删除以下两行代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  far.tilePosition.x -= 0.128; // 删除
  mid.tilePosition.x -= 0.64; // 删除

  renderer.render(stage);

  requestAnimFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;替换成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  far.update();
  mid.update();

  renderer.render(stage);

  requestAnimFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存更改并测试，保证 Chrome 中按预期正常运行。&lt;/p&gt;

&lt;h3 id=&#34;停下来思考一下&#34;&gt;停下来思考一下&lt;/h3&gt;

&lt;p&gt;虽然视差滚动器和以前一样表现正常，但我们实际上已对代码的整体架构进行了一些重大的更改。我们采用了更加面向对象的设计，利用继承创建了两个代表视差层的特殊展示对象。&lt;/p&gt;

&lt;p&gt;能够编写特殊的展示对象是一个强大的概念，在许多情况下都能派上用场。我们的 Far 类和 Mid 类都像 pixi.js 支持的任何其他展示对象一样。下图说明了我们的两个特殊类位于 Pixi 展示对象类的继承结构中的位置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img13.360buyimg.com/devfe/jfs/t1/27384/39/11126/25797/5c8ca6b2E6fabfee4/0d138469e63570ba.png&#34; alt=&#34;ps-tut2-screenshot2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在继续之前，看看你的代码文件并确保我们迄今为止所做的一切都有意义。实际上并没有很多代码，但如果你是面向对象编程的新手，那么完全消化代码所表示的知识可能需要一些时间。&lt;/p&gt;

&lt;h2 id=&#34;建立滚动器-scroller-类&#34;&gt;建立滚动器（Scroller）类&lt;/h2&gt;

&lt;p&gt;本教程开头概述的目标之一是将我们的视差滚动器包装到一个类中。现在我们已经编写了 Far 类和 Mid 类，现在我们写一个滚动器类。&lt;/p&gt;

&lt;p&gt;这样的话我们就能够从 index.html 中删除 Mid 和 Far &lt;strong&gt;实例&lt;/strong&gt;，将它们封装在一个单独的对象中，以满足我们所有的滚动类需要实现的需求。&lt;/p&gt;

&lt;p&gt;让我们写一个能够实现我们想法的类。创建一个名为 Scroller.js 的新 JavaScript 文件，并通过向其添加以下代码来定义名为 Scroller 的类：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Scroller(stage) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于这个类，有两点值得注意。首先，它的构造函数需要引用我们的舞台（Pixi.Container）。其次，它不会继承任何东西。&lt;/p&gt;

&lt;p&gt;与 Far 和 Mid 类不同，我们的 Scroller 类不是特殊的展示对象。相反，它将使用构造函数的 stage 参数添加我们的 远景层和中间层实例。（译者：Scroller 类只起到封装和控制作用，并不用继承任何 Pixi 中的类）&lt;/p&gt;

&lt;p&gt;让我们先在类中添加远景层的实例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Scroller(stage) {
  this.far = new Far();
  stage.addChild(this.far);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行代码创建了 Far 类的实例。请注意，我们将实例存储在名为 &lt;code&gt;far&lt;/code&gt; 的 &lt;code&gt;成员变量&lt;/code&gt; 中。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;成员变量&lt;/strong&gt; 是通过 this 关键字直接向类添加 &lt;strong&gt;属性&lt;/strong&gt; 来创建的。成员变量具有在类实例的整个生命周期中持久化可见的优点，这意味着类的任何其他方法也可以访问它。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第二行将远景层实例添加到舞台。&lt;/p&gt;

&lt;p&gt;现在让我们为中间层做同样的事情。将以下两行添加到构造函数中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Scroller(stage) {
  this.far = new Far();
  stage.addChild(this.far);

  this.mid = new Mid();
  stage.addChild(this.mid);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在 Scroller 类中有两个成员变量：&lt;code&gt;far&lt;/code&gt; 和 &lt;code&gt;mid&lt;/code&gt;。这是很有用，因为它允许我们从类中的任何其他方法中访问我们的视差层。这也很方便，因为我们确实需要添加一个额外的方法。它将用于更新两个层的位置。我们现在继续添加此方法（update）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Scroller(stage) {
  this.far = new Far();
  stage.addChild(this.far);

  this.mid = new Mid();
  stage.addChild(this.mid);
}

Scroller.prototype.update = function() {
  this.far.update();
  this.mid.update();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还记得我们为 Mid 和 Far 类编写了 &lt;code&gt;update()&lt;/code&gt; 方法吗？在我们的 Scroller 类自己的 &lt;code&gt;update()&lt;/code&gt; 方法需要做的就是调用这些更新方法。&lt;/p&gt;

&lt;h3 id=&#34;插入-scroller-类&#34;&gt;插入 Scroller 类&lt;/h3&gt;

&lt;p&gt;现在 Scroller 类可以表示我们的视差滚动器了，我们可以回到 index.html 页面并将其插入。&lt;/p&gt;

&lt;p&gt;打开 index.html 并引用 Scroller.js：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.0.0/pixi.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;Far.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;Mid.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;Scroller.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在向下移动到 &lt;code&gt;init()&lt;/code&gt; 函数并删除以下代码行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function init() {
  stage = new PIXI.Stage(0x66FF99);
  renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;quot;game-canvas&amp;quot;)}
  );

  far = new Far(); // 删除
  stage.addChild(far); // 删除

  mid = new Mid(); // 删除
  stage.addChild(mid); // 删除

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请记住，远景层和中间层现在都由 Scroller 类处理。因此，我们需要创建一个Scroller 实例来替换我们刚删除的行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function init() {
  stage = new PIXI.Stage(0x66FF99);
  renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;quot;game-canvas&amp;quot;)}
  );

  scroller = new Scroller(stage); // 实例化 Scroller

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另请注意，我们将 stage 引用传递给 Scroller 类的构造函数。这样做非常重要，因为 Scroller 类需要这个引用才能将 远景层和中间层添加到 &lt;strong&gt;展示列表&lt;/strong&gt; 中。&lt;/p&gt;

&lt;p&gt;现在需要做的就是在主循环中调用 scroller 的 &lt;code&gt;update()&lt;/code&gt; 方法。首先，从主循环中删除以下两行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  far.update(); // 删除
  mid.update(); // 删除

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在添加以下行来更新滚动器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  scroller.update(); // 添加

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存更改并使用 Chrome 测试所有内容。一如既往地在 JavaScript 控制台中查找是否有错误，如果有，请仔细检查你的代码。&lt;/p&gt;

&lt;p&gt;我们已经成功地重新构建了视差滚动，以便所有内容都包含在一个类中。如果你查看 index.html，你会发现我们已经隐藏了我们上次在第一篇教程中写的所有实现代码。&lt;/p&gt;

&lt;h2 id=&#34;添加视口-viewport&#34;&gt;添加视口（viewport）&lt;/h2&gt;

&lt;p&gt;我们已经取得了巨大的进步，但还有一件事我们做。为了使我们的滚动条完整，需要添加 &lt;strong&gt;视口&lt;/strong&gt; 的概念。将视口视为一个查看游戏地图的窗口。&lt;/p&gt;

&lt;p&gt;你可能会问「我们不是已经有一个视口了吗？」是的，毕竟，当你在浏览器中运行代码时，我们只能看到在舞台边界内可以看到的内容。这是似乎就是一个视口了，但是我们还没有办法知道我们在游戏世界中 &lt;strong&gt;滚动了多远&lt;/strong&gt;（译者：需要实现视口是因为后续会涉及到地图的概念，地图中游戏场景是有长度、距离的概念的，这就方便我们实现一些特殊场景，比如落箱子，障碍物等。因为不引用视口的概念游戏将是无限循环滚动的。这会导致计算距离变得很复杂，而且无法将地图设计成一种具体的抽象）。另外，如果我们可以简单地跳到某个位置并确切地看到我们的图层应该如何看起来，那不是很好吗？一旦我们添加了视口的概念并提供了设置其当前位置的方法，那么一切都将成为可能。&lt;/p&gt;

&lt;h3 id=&#34;给-scroller-类添加-setviewportx-方法&#34;&gt;给 Scroller 类添加 setViewportX 方法&lt;/h3&gt;

&lt;p&gt;目前我们有一个 &lt;code&gt;update()&lt;/code&gt; 方法，我们用它来连续滚动我们的视差层。可以使用一个名为 &lt;code&gt;setViewportX()&lt;/code&gt; 的新方法替换它，我们可以用它来设置视口的水平位置。调用此方法将让我们随意定位我们的游戏地图。&lt;/p&gt;

&lt;p&gt;让我们从 Scroller 类开始。&lt;/p&gt;

&lt;p&gt;打开 Scroller.js 并删除现有的 &lt;code&gt;update()&lt;/code&gt; 方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Scroller(stage) {
  this.far = new Far();
  stage.addChild(this.far);

  this.mid = new Mid();
  stage.addChild(this.mid);
}

Scroller.prototype.update = function() { // 删除
  this.far.update();// 删除
  this.mid.update();// 删除
};// 删除
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们的 &lt;code&gt;setViewportX()&lt;/code&gt; 方法非常简单。它期望将一个数字作为方法的 viewportX 参数传递，然后将该值传递给我们的每个层。显然，我们的图层都需要实现自己的 &lt;code&gt;setViewportX()&lt;/code&gt; 方法。让我们继续吧，现在就去做吧。&lt;/p&gt;

&lt;h3 id=&#34;给-far-类添加-setviewportx-方法&#34;&gt;给 Far 类添加 setViewportX 方法&lt;/h3&gt;

&lt;p&gt;我们首先删除类中的现有 &lt;code&gt;update()&lt;/code&gt; 方法。打开 Far.js 并删除以下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Far() {
  var texture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
  PIXI.extras.TilingSprite.call(this, texture, 512, 256);

  this.position.x = 0;
  this.position.y = 0;
  this.tilePosition.x = 0;
  this.tilePosition.y = 0;
}

Far.prototype = Object.create(PIXI.extras.TilingSprite.prototype);

Far.prototype.update = function() { // 删除
  this.tilePosition.x -= 0.128; // 删除
}; // 删除
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们需要能够跟踪视口的水平位置。为此，我们在类的构造函数中定义新的成员变量：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Far() {
  var texture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
  PIXI.extras.TilingSprite.call(this, texture, 512, 256);

  this.position.x = 0;
  this.position.y = 0;
  this.tilePosition.x = 0;
  this.tilePosition.y = 0;

  this.viewportX = 0; // 新的成员变量
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再添加一个类的 &lt;strong&gt;静态常量&lt;/strong&gt;（&lt;code&gt;DELTA_X&lt;/code&gt;）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Far.prototype = Object.create(PIXI.extras.TilingSprite.prototype);

Far.DELTA_X = 0.128;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DELTA_X 常量的值看起来应该很熟悉。它是我们之前在每次调用 &lt;code&gt;update()&lt;/code&gt; 时移动图层的 tilePosition 的像素数。显然，使用常量会使我们的代码更具可读性和可维护性，这就是我们选择使用常量的原因。基本上，每当我们的视口移动一个单元时，我们将使用常量将远景层移动 0.128 像素。所以现在让我们编写一个 &lt;code&gt;setViewportX()&lt;/code&gt; 方法，添加以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Far.prototype = Object.create(PIXI.extras.TilingSprite.prototype);

Far.DELTA_X = 0.128;

Far.prototype.setViewportX = function(newViewportX) {
  var distanceTravelled = newViewportX - this.viewportX;
  this.viewportX = newViewportX;
  this.tilePosition.x -= (distanceTravelled * Far.DELTA_X);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码并不难理解。首先，我们计算自从上次调用 &lt;code&gt;setViewportX()&lt;/code&gt; 以来的滚动的距离。然后视口的新水平位置存储在我们的 &lt;code&gt;viewportX&lt;/code&gt; 成员变量中。最后，我们乘以 DELTA_X 常数，以确定将图层的瓦片移动了多远。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;应该注意，我们的 x 位置代表视口窗口的左侧。在其他实现中，x 位置代表视口的中心也很常见。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;保存最新版本的 &lt;code&gt;Far.js&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;现在我们需要对 &lt;code&gt;Mid&lt;/code&gt; 类进行相同的更改。&lt;/p&gt;

&lt;h3 id=&#34;给-mid-类添加-setviewportx-方法&#34;&gt;给 Mid 类添加 setViewportX 方法&lt;/h3&gt;

&lt;p&gt;Mid 类的代码几乎与 Far 类相同，所以我们能快速写出来。&lt;/p&gt;

&lt;p&gt;打开 Mid.js 并删除其 &lt;code&gt;update()&lt;/code&gt; 方法、并添加 &lt;code&gt;setViewportX&lt;/code&gt; 方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Mid() {
  var texture = PIXI.Texture.fromImage(&amp;quot;resources/bg-mid.png&amp;quot;);
  PIXI.extras.TilingSprite.call(this, texture, 512, 256);

  this.position.x = 0;
  this.position.y = 128;
  this.tilePosition.x = 0;
  this.tilePosition.y = 0;

  this.viewportX = 0;
}

Mid.prototype = Object.create(PIXI.extras.TilingSprite.prototype);

Mid.DELTA_X = 0.64;

Mid.prototype.setViewportX = function(newViewportX) {
  var distanceTravelled = newViewportX - this.viewportX;
  this.viewportX = newViewportX;
  this.tilePosition.x -= (distanceTravelled * Mid.DELTA_X);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这两个类之间的唯一区别是 Mid 类的 DELTA_X 常量值为 &lt;code&gt;0.64&lt;/code&gt;，这是为了确保图层的滚动速度比 far 层快。保存更改。&lt;/p&gt;

&lt;h3 id=&#34;测试视口&#34;&gt;测试视口&lt;/h3&gt;

&lt;p&gt;我们应该测试视口并确保设置其位置反映在我们的视差层中。首先，我们需要打开 index.html 并删除 scrolller  的 &lt;code&gt;update()&lt;/code&gt; 方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  scroller.update(); // 删除

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存 index.html 文件并在浏览器中测试更改。你应该注意到你只能看见视差层，但都没有滚动。那是因为我们没有添加任何代码来真正更改视口的水平位置。目前它固定在默认的 x 位置 0。&lt;/p&gt;

&lt;p&gt;在我们添加代码之前，我们可以在 Chrome 的 JavaScript 控制台中测试一下我们的滚动条的 &lt;code&gt;setViewportX()&lt;/code&gt; 实际上是有效的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scroller.setViewportX(50); /// 控制台中调用
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript 控制台可以访问程序中的任何全局变量。因此，我们可以通过全局 &lt;code&gt;scroller&lt;/code&gt; 变量访问滚动条并调用其 &lt;code&gt;setViewportX()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;您应该看到视差图层向左移动，这表示我们已成功重新定位了视口。&lt;/p&gt;

&lt;p&gt;尝试将视口移动到 x = 7000 的位置 ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scroller.setViewportX(7000);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;滚动视口&#34;&gt;滚动视口&lt;/h3&gt;

&lt;p&gt;很明显，我们可以通过不断更新滚动器的视口位置来模拟游戏世界中的移动。我们可以在主循环中执行此操作，但是我们得够获取视口的当前水平位置。让我们继续为 &lt;code&gt;Scroller&lt;/code&gt; 类添加一个新方法。&lt;/p&gt;

&lt;h3 id=&#34;获取视口的位置&#34;&gt;获取视口的位置&lt;/h3&gt;

&lt;p&gt;目前来讲我们的 Scroller 类并没存储当前视口位置，我们需要一个成员变量来实现它。&lt;/p&gt;

&lt;p&gt;打开 Scroller.js 并在构造函数中定义以下成员变量：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Scroller(stage) {
  this.far = new Far();
  stage.addChild(this.far);

  this.mid = new Mid();
  stage.addChild(this.mid);

  this.viewportX = 0; // 水平滚动量
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并在 &lt;code&gt;setViewportX()&lt;/code&gt; 方法中更新 &lt;code&gt;viewportX&lt;/code&gt; 成员变量的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scroller.prototype.setViewportX = function(viewportX) {
  this.viewportX = viewportX; // 更新
  this.far.setViewportX(viewportX);
  this.mid.setViewportX(viewportX);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成后，我们可以编写一个 &lt;code&gt;getViewportX()&lt;/code&gt; 方法，该方法将返回视口的当前位置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scroller.prototype.setViewportX = function(viewportX) {
  this.viewportX = viewportX;
  this.far.setViewportX(viewportX);
  this.mid.setViewportX(viewportX);
};
// 新方法
Scroller.prototype.getViewportX = function() {
  return this.viewportX;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存你的代码。&lt;/p&gt;

&lt;h3 id=&#34;更新主循环&#34;&gt;更新主循环&lt;/h3&gt;

&lt;p&gt;现在要做的就是不断更新滚动器的视口位置。我们将在主循环中执行此操作。&lt;/p&gt;

&lt;p&gt;打开 index.html，只需添加以下两行代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  var newViewportX = scroller.getViewportX() + 5; // 添加
  scroller.setViewportX(newViewportX); // 添加
            
  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行获取视口的 x 位置并将其增加 5 个单位。第二行采用新值并更新视口的当前 x 位置。从本质上讲，它会强制视口在每次调用主循环时滚动 5 个单位。&lt;/p&gt;

&lt;p&gt;保存代码并在 Chrome 中运行它。你应该会再一次看到视差层向外滚动。试试不同的滚动速度看。例如，将视口增加 15 个单位而不是 5 个单位。&lt;/p&gt;

&lt;h3 id=&#34;移动视口&#34;&gt;移动视口&lt;/h3&gt;

&lt;p&gt;让我们在 Scroller 类中再添加一个方法 &lt;code&gt;moveViewportXBy&lt;/code&gt;，可以将视口从其当前位置移动指定的距离。这将让主循环看起来更加简洁。&lt;/p&gt;

&lt;p&gt;在保存更改之前，打开 Scroller.js 并添加以下方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scroller.prototype.getViewportX = function() {
  return this.viewportX;
};
// 添加新方法
Scroller.prototype.moveViewportXBy = function(units) {
  var newViewportX = this.viewportX + units;
  this.setViewportX(newViewportX);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像我们之前做过的一样，这个新方法不难理解。它只是计算出视口的新位置然后调用类的 &lt;code&gt;setViewportX()&lt;/code&gt; 方法来实际设置视口位置。&lt;/p&gt;

&lt;p&gt;移回 index.html 并删除以下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  var newViewportX = scroller.getViewportX() + 5; // 删除
  scroller.setViewportX(newViewportX); // 删除

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用 &lt;code&gt;moveViewportXBy()&lt;/code&gt; 方法的单行替换它们：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  scroller.moveViewportXBy(5); // 调用新的方法

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存更改并在 Web 浏览器中测试更改。&lt;/p&gt;

&lt;h2 id=&#34;回顾程序的主入口&#34;&gt;回顾程序的主入口&lt;/h2&gt;

&lt;p&gt;本系列教程的第二部分即将结束。在我们完成之前，让我们回顾下 index.html 并做最后一个重构。&lt;/p&gt;

&lt;p&gt;虽然我们已经完成了减少对全局变量的依赖的这样一项令人敬重的工作，但我们的 index.html 文件仍然有一些零散的全局变量。实际上，在大型应用程序中，将尽可能多的 JavaScript 与 HTML 页面分开也是一种很好的做法。虽然我们的 HTML 页面中没有多少 JavaScript，但我们可以做得更好。让我们把代码单独封装在一个与自己类名相同的文件中。这样，我们当前所依赖的全局变量将成为我们新类的成员变量。&lt;/p&gt;

&lt;p&gt;创建一个新文件并将其命名为 &lt;code&gt;Main.js&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为类创建构造函数，并将HTML页面的 &lt;code&gt;init()&lt;/code&gt; 函数中的代码放入其中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Main() {
  this.stage = new PIXI.Container();
  this.renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;quot;game-canvas&amp;quot;)}
  );

  this.scroller = new Scroller(this.stage);

  requestAnimationFrame(this.update.bind(this));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意上面使用 &lt;code&gt;this&lt;/code&gt; 关键字。我们使用它来定义 &lt;code&gt;stage&lt;/code&gt;，&lt;code&gt;renderer&lt;/code&gt; 和 &lt;code&gt;scroller&lt;/code&gt; 作为成员变量。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; 关键字也用于调用 JavaScript 函数 &lt;code&gt;requestAnimationFrame()&lt;/code&gt;。代码大概是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requestAnimationFrame(this.update.bind(this));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里使用它来指定我们的类名为 &lt;code&gt;update()&lt;/code&gt; 的方法（我们仍然要写这个方法）将在下一次重绘时调用。另外，还调用另一个您可能不熟悉的名为 &lt;code&gt;bind()&lt;/code&gt; 的JavaScript 函数。它用来保证在调用 &lt;code&gt;update()&lt;/code&gt; 时它正确地访问到 Main 类的实例。如果不用 &lt;code&gt;bind()&lt;/code&gt;，&lt;code&gt;update()&lt;/code&gt; 方法将无法访问和使用任何 Main 类的成员变量。&lt;/p&gt;

&lt;p&gt;好吧，让我们实际编写我们的类的 &lt;code&gt;update()&lt;/code&gt; 方法。它将只包含我们原来 HTML 页面的 &lt;code&gt;update()&lt;/code&gt; 函数中的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Main.prototype.update = function() {
  this.scroller.moveViewportXBy(Main.SCROLL_SPEED);
  this.renderer.render(this.stage);
  requestAnimationFrame(this.update.bind(this));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们再次使用了 &lt;code&gt;this&lt;/code&gt; 关键字，而且利用了JavaScript 的 &lt;code&gt;bind()&lt;/code&gt; 函数来确保我们的更新循环始终在正确的作用域下。&lt;/p&gt;

&lt;p&gt;另外，请注意上面的代码在调用 scrolller 的 &lt;code&gt;moveViewportXBy()&lt;/code&gt; 方法时使用了一个名为 &lt;code&gt;SCROLL_SPEED&lt;/code&gt; 的常量。以前我们刚刚传递了一个硬编码值。我们实际可以将该常量添加到 Main 类中做为静态常量。在构造函数后面直接添加以下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  requestAnimationFrame(this.update.bind(this));
}

Main.SCROLL_SPEED = 5; // 添加

Main.prototype.update = function() {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好的，保存你的代码。&lt;/p&gt;

&lt;p&gt;现在让我们打开 index.html 并删除以前的老代码。&lt;/p&gt;

&lt;p&gt;删除以下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 全部删除 --&amp;gt;
&amp;lt;script&amp;gt;
  function init() {
    stage = new PIXI.Container();
    renderer = PIXI.autoDetectRenderer(
      512,
      384,
      {view:document.getElementById(&amp;quot;game-canvas&amp;quot;)}
    );

    scroller = new Scroller(stage);

    requestAnimationFrame(update);
  }

  function update() {
    scroller.moveViewportXBy(5);

    renderer.render(stage);

    requestAnimationFrame(update);
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用一个简单的实例化 Main 类的新 &lt;code&gt;init()&lt;/code&gt; 函数代替：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  function init() {
    main = new Main();
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后，通过添加以下行来引用到类 ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.0.0/pixi.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;Far.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;Mid.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;Scroller.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;Main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- 添加 --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存您的工作并测试仍在 Google Chrome 中运行的所有内容。&lt;/p&gt;

&lt;p&gt;我们已经成功地将所有内容都移到了一个主应用程序类中，而 index.html中只剩下几行 JavaScript 来解决所有问题。&lt;/p&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;哇哦！我们这一节涉及到了很多内容。虽然最终结果是相同的（我们仍然只有两个滚动视差层），但我希望你能看到重构代码的好处。现在一切都比干净了很多，我们有一个用于管理视差层的 Scroller 类。虽然这次我们的重点不是 pixi.js，但你至少应该体会到扩展 Pixi 展示对象类的好处。&lt;/p&gt;

&lt;h2 id=&#34;下集预告&#34;&gt;下集预告…&lt;/h2&gt;

&lt;p&gt;所有这些变化都处于理想的位置，可以在此基础上开发第三个更复杂的视差层了。这个图层将作为游戏世界的 地图，并将由一系列 &lt;strong&gt;精灵&lt;/strong&gt; 构建，而不是简单的重复纹理。我们将把目标放在 pixi.js 上，将涉及各种各样的好东西，包括精灵表（Spritesheet），纹理帧（texture frames）和对象池（object pooling）。&lt;/p&gt;

&lt;p&gt;记得 &lt;a href=&#34;https://github.com/ccaleb/pixi-parallax-scroller&#34;&gt;GitHub&lt;/a&gt; 上提供了本系列和本系列教程的源代码哦。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://keelii.com&#34;&gt;第三部分&lt;/a&gt; 见。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Pixi.js 构建一个视差滚动器（第一篇）</title>
      <link>https://keelii.com/2019/03/16/building-a-parallax-scroller-with-pixijs-cn-1/</link>
      <pubDate>Sat, 16 Mar 2019 19:20:04 -0700</pubDate>
      
      <guid>https://keelii.com/2019/03/16/building-a-parallax-scroller-with-pixijs-cn-1/</guid>
      <description>

&lt;h2 id=&#34;翻译对照&#34;&gt;翻译对照&lt;/h2&gt;

&lt;p&gt;原文：
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=5226&#34;&gt;PART 1&lt;/a&gt;・
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=5666&#34;&gt;PART 2&lt;/a&gt;・
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=6496&#34;&gt;PART 3&lt;/a&gt;・
&lt;a href=&#34;http://www.yeahbutisitflash.com/?p=7046&#34;&gt;PART 4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;译文：
&lt;a href=&#34;https://keelii.com/2019/03/16/building-a-parallax-scroller-with-pixijs-cn-1/&#34;&gt;第一篇&lt;/a&gt;・
&lt;a href=&#34;https://keelii.com/2019/03/17/building-a-parallax-scroller-with-pixijs-cn-2/&#34;&gt;第二篇&lt;/a&gt;・
&lt;a href=&#34;https://keelii.com/2019/03/19/building-a-parallax-scroller-with-pixijs-cn-3/&#34;&gt;第三篇&lt;/a&gt;・
第四篇&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;关注 &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=chriscaleb&#34;&gt;@chriscaleb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个系列的教程已经更新到了 &lt;a href=&#34;http://www.pixijs.com/&#34;&gt;PixiJS v4&lt;/a&gt; 版本。&lt;/p&gt;

&lt;p&gt;曾经玩过 &lt;a href=&#34;http://www.adamatomic.com/canabalt/&#34;&gt;Canabalt&lt;/a&gt; 和 &lt;a href=&#34;https://chrome.google.com/webstore/detail/monster-dash/cknghehebaconkajgiobncfleofebcog?hl=en&#34;&gt;Monster Dash&lt;/a&gt;，好奇他们是如何构建一个滚动游戏地图的？在这个教程中我们将向「构建一个视差滚动器」迈出第一步，我们将使用 JavaScript 和 &lt;a href=&#34;http://www.pixijs.com/&#34;&gt;pixi.js&lt;/a&gt; 这个 2D 渲染引擎。&lt;/p&gt;

&lt;h3 id=&#34;你将学到什么&#34;&gt;你将学到什么…&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Pixi.js 的基础知识&lt;/li&gt;
&lt;li&gt;如何处理纹理（textures）和精灵（sprites）&lt;/li&gt;
&lt;li&gt;如何实现简单的视差滚动&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;预备知识&#34;&gt;预备知识…&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;了解 JavaScript 或者 ActionScript 的基础知识&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JavaScript 无处不在，由于浏览器的不断改善和大量的 JavaScript 库，我们真的开始看到 HTML5 游戏领域开发蓬勃发展。但是当有很多库可用的时候，选择合适的并非易事。&lt;/p&gt;

&lt;p&gt;这个系列的教程将向你介绍 JavaScript 游戏开发的基础，我们会聚焦到 pixijs。它是一个支持 WebGL 和 HTML5 Canvas 的渲染框架。教程最后你将完成如下的一个视差滚动地图程序：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yeahbutisitflash.com/pixi-parallax-scroller/final/index.html&#34;&gt;&lt;img src=&#34;https://img10.360buyimg.com/devfe/jfs/t1/25206/13/10616/142679/5c887df7E7c1fa38a/eab39f5f7ab1cc6d.png&#34; alt=&#34;ps-tut1-screenshot1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;点击上面的链接启动最终版的程序，这就是你将要完成的。注意它包含了三个视差层：一个远景（far）层，一个中间（mid）层，一个前景（foreground）层。在第一篇教程中我们将集中精力构建远景层和中间层。当然为了做到这一点教程必须涉及 pixi.js 的基础，当然如果你还是个 JavaScript 新手，这会是个很好的开始学习 HTML5 游戏编程的地方。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yeahbutisitflash.com/pixi-parallax-scroller/tutorial-1/index.html&#34;&gt;&lt;img src=&#34;https://img10.360buyimg.com/devfe/jfs/t1/25206/13/10616/142679/5c887df7E7c1fa38a/eab39f5f7ab1cc6d.png&#34; alt=&#34;ps-tut1-screenshot1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;开始之前，点击上面的链接预览下这篇教程中将做成的效果。你也可以从 github 上下载这个程序的 &lt;a href=&#34;https://github.com/ccaleb/pixi-parallax-scroller&#34;&gt;源代码&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;起步&#34;&gt;起步&lt;/h2&gt;

&lt;p&gt;为了完成编码，你需要一个代码编辑器，我将使用一个体验版的 sublime text，可以在 &lt;a href=&#34;www.sublimetext.com/2&#34;&gt;这里&lt;/a&gt; 下载到。&lt;/p&gt;

&lt;p&gt;还需要一个浏览器来测试你的程序。任何现代浏览器都可以，我将用 Google Chrome，开发过程中将会涉及到一些开始者工具的使用。如果你还没有安装 Chrome，可以去 &lt;a href=&#34;www.google.com/chrome&#34;&gt;这里&lt;/a&gt; 下载。&lt;/p&gt;

&lt;p&gt;为了测试你的程序，你还需要在你的开发机上安装一个 web 服务器。如果你用的是 Window，可以 &lt;a href=&#34;http://www.yeahbutisitflash.com/www.howtogeek.com/howto/windows-vista/how-to-install-iis-on-windows-vista&#34;&gt;安装 IIS&lt;/a&gt;，macOS 用户可以配置下系统默认的 &lt;a href=&#34;http://macdevcenter.com/pub/a/mac/2001/12/07/apache.html&#34;&gt;Apache&lt;/a&gt;，如果你的系统是 OS X Mountain Lion 配置 web 服务器可以会比较麻烦，可以参考这个 &lt;a href=&#34;http://reviews.cnet.com/8301-13727_7-57481978-263/how-to-enable-web-sharing-in-os-x-mountain-lion/&#34;&gt;教程&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你有自己托管的 web 服务器，就可以直接上传所以文件来测试，或者如果你有一个 &lt;a href=&#34;https://www.dropbox.com/&#34;&gt;Dropbox&lt;/a&gt; 账号，你可以通过 &lt;a href=&#34;http://droppages.com/&#34;&gt;DropPages&lt;/a&gt; 服务来托管你的文件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;web 服务器建好后，创建一个目录 &lt;code&gt;parallax-scroller&lt;/code&gt; 如果你使用 Windows。你的 web 服务器根目录应该类似 &lt;code&gt;C:\inetpub\parallax-scroller&lt;/code&gt; 。如果你使用 OS X 则应该是 &lt;code&gt;/Users/your_user_name/Sites&lt;/code&gt;，&lt;code&gt;your_user_name&lt;/code&gt; 就是你电脑的用户名。&lt;/p&gt;

&lt;p&gt;最后，在教程中我们将使用几个图片素材，不用你自己去找，我已经为你打包好了一个 &lt;a href=&#34;http://www.yeahbutisitflash.com/pixi-parallax-scroller/tutorial-1/resources.zip&#34;&gt;zip 文件&lt;/a&gt;，下载并解压好你的 &lt;code&gt;parallax-scroller&lt;/code&gt; 目录。&lt;/p&gt;

&lt;p&gt;下面就是你的 &lt;code&gt;parallax-scroller&lt;/code&gt; 文件夹的样子（Windows）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img13.360buyimg.com/devfe/jfs/t1/10162/32/14136/48598/5c8884a8Ee6927d64/153a8f1b6f1b4e97.png&#34; alt=&#34;screenshot3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果你用的是 Mac OS X 则应该如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img30.360buyimg.com/devfe/jfs/t1/31876/28/5811/61642/5c8884ccE7e17d248/5c69f80f99e2cb1d.png&#34; alt=&#34;screenshot4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;现在我们已经准备好开始写代码了，启动 Sublime Text 2 或者你最喜欢的编辑器。&lt;/p&gt;

&lt;h2 id=&#34;创建画布&#34;&gt;创建画布&lt;/h2&gt;

&lt;p&gt;所有的 pixijs 项目都以一个 HTML 文件开始。在这里我们将创建一个 canvas 元素以及引入 pixi.js 库。canvas 元素表示HTML页面上将呈现滚动条的区域。&lt;/p&gt;

&lt;p&gt;在你的项目根目录 &lt;code&gt;parallax-scroller&lt;/code&gt; 下使用编辑器新建一个文件，命名为 &lt;code&gt;index.html&lt;/code&gt;，并写入下面的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Parallax Scrolling Demo&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在看起来还非常奇怪，我们的 HTML 页面只有一个 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 元素。&lt;/p&gt;

&lt;p&gt;现在让我们在页面上添加 HTML5 Canvas 元素，在 body 元素中添加如下的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
  &amp;lt;div align=&amp;quot;center&amp;quot;&amp;gt;
    &amp;lt;canvas id=&amp;quot;game-canvas&amp;quot; width=&amp;quot;512&amp;quot; height=&amp;quot;384&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们指定了 canvas 宽度 512 像素，高度 384 像素。这就是 pixi.js 为库渲染游戏的地方。注意我们给 canvas 了一个 id 属性，值为 &lt;code&gt;game-canvas&lt;/code&gt; 这将使我们易于控制它，当 pixi.js 启动时也需要它&lt;/p&gt;

&lt;p&gt;现在启动你的 web 服务器，在 浏览器中打开类似 &lt;a href=&#34;http://localhost/parallax-scroller/index.html&#34;&gt;http://localhost/parallax-scroller/index.html&lt;/a&gt; 或者 &lt;a href=&#34;http://localhost/~**your_user_name**/parallax-scroller/index.html&#34;&gt;http://localhost/~**your_user_name**/parallax-scroller/index.html&lt;/a&gt; 的链接&lt;/p&gt;

&lt;p&gt;你会发现并没有什么东西，我们来给 canvas 加点样式（style 标签）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Endless Runner Game Demo&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
      body { background-color: #000000; }
      canvas { background-color: #222222; }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存并刷新，你将会看见一个水平居中的灰色区域出现在页面上。&lt;/p&gt;

&lt;h2 id=&#34;引入-pixi-js-类库&#34;&gt;引入 pixi.js 类库&lt;/h2&gt;

&lt;p&gt;在 &lt;/body&gt; 标签前面加入引用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
  &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/pixi.js/4.0.0/pixi.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pixi.js 库文件托管在 CDN 上，URL 上的 &lt;code&gt;4.0.0&lt;/code&gt; 表示库的版本号，你可以替换成其它的发行版。&lt;/p&gt;

&lt;h2 id=&#34;添加程序的入口&#34;&gt;添加程序的入口&lt;/h2&gt;

&lt;p&gt;给 body 元素添加 &lt;code&gt;onload=&amp;quot;init();&lt;/code&gt; 表示页面加载完成时调用 init 方法。我们在 script 标签中添加一个 init 方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body onload=&amp;quot;init();&amp;quot;&amp;gt;
  &amp;lt;div align=&amp;quot;center&amp;quot;&amp;gt;
    &amp;lt;canvas id=&amp;quot;game-canvas&amp;quot; width=&amp;quot;512&amp;quot; height=&amp;quot;384&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;script src=&amp;quot;pixi.js-master/bin/pixi.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
    function init() {
      console.log(&amp;quot;init() successfully called.&amp;quot;);
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开 Chrome Console，Windows 下按 &lt;code&gt;F12&lt;/code&gt;，macOS 下按 &lt;code&gt;Cmd + Opt + i&lt;/code&gt;。正常的话控制台就会有下面的输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; init() successfully called.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在这个 init 方法做的事情还很少，最终它将做为入口负责你程序的调用。&lt;/p&gt;

&lt;h2 id=&#34;初始化-pixi-js&#34;&gt;初始化 pixi.js&lt;/h2&gt;

&lt;p&gt;我们在 init 方法中需要做下面两件事情：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创建你的舞台（stage）&lt;/li&gt;
&lt;li&gt;选择并实例化一个渲染器（renderer）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们先来创建一个舞台对象，如果你是个 Flash 开发者，你可能会对舞台的概念比较熟悉了。基本上舞台就是你游戏的图形内容呈现的地方。另一方面，渲染器控制舞台并且把游戏绘制到你的 HTML 页面中的 canvas 元素上，这样你的做的东西才最终呈现给了用户。&lt;/p&gt;

&lt;p&gt;我们来创建一个舞台对象并将它关联到一个名字叫做 &lt;code&gt;stage&lt;/code&gt; 的全局变量上。并且删除之前的 log 语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function init() {
  console.log(&amp;quot;init() successfully called.&amp;quot;);
  stage = new PIXI.Container();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pixi.js 的 API 包含了一些类和函数，并且被保存在 &lt;code&gt;PIXI&lt;/code&gt; 模块命名空间下面。PIXI.Container 类用来表示一些 &lt;strong&gt;展示对象&lt;/strong&gt;（display object） 的集合，同样也可以表示舞台这个根展示对象。&lt;/p&gt;

&lt;p&gt;现在我们已经创建好了一个舞台，我们还需要一个渲染器。Pixi.js 支持两种渲染器：WebGL 和 HTML5 Canvas。你可以通过 &lt;code&gt;PIXI.WebGLRenderer&lt;/code&gt; 或者 &lt;code&gt;PIXI.CanvasRenderer&lt;/code&gt; 来分别创建它们各自的实例。然而，更好的做法是让 Pixi 为你判断浏览器自动检测并使用正确的渲染器。Pixi 默认会尝试使用 WebGL，如果不支持则回滚到  canvas。我们调用用 Pixi 的 &lt;code&gt;PIXI.autoDetectRenderer()&lt;/code&gt; 函数来自动帮我们选择合适的渲染器。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function init() {		
  stage = new PIXI.Container();
  renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;quot;game-canvas&amp;quot;)}
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;autoDetectRenderer()&lt;/code&gt; 函数需要传入渲染舞台上 cavnas 的宽度和高度，以及 cavnas 元素的引用，它返回 &lt;code&gt;PIXI.WebGLRenderer&lt;/code&gt; 或 &lt;code&gt;PIXI.CanvasRenderer&lt;/code&gt; 的实例，我们将其保存在名为 &lt;code&gt;renderer&lt;/code&gt; 的全局变量中。&lt;/p&gt;

&lt;p&gt;在上面的代码中，我们通过一个包含 &lt;code&gt;view&lt;/code&gt; 属性的 JavaScript 对象来传递给 &lt;code&gt;autoDetectRenderer&lt;/code&gt; 方法，表示 canvas 元素的引用。我们传递这个对象做为函数的第三个参数而不是直接传 canvas 对象的引用。&lt;/p&gt;

&lt;p&gt;我们使用了硬编码的方式指定了宽，高，实际上可以直接通过 canvas 元素取得这两个值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var width = document.getElementById(&amp;quot;game-canvas&amp;quot;).width;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;渲染&#34;&gt;渲染&lt;/h2&gt;

&lt;p&gt;为了能看到舞台上的内容，你得指导你的渲染器把舞台上的内容真正的绘制到 canvas 上。可以通过调用 renderer 的 render 方法，并传入舞台对象的引用来做到：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function init() {		
  stage = new PIXI.Container();
  renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;quot;game-canvas&amp;quot;)}
  );
  renderer.render(stage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将成功的把舞台渲染到浏览器中。当然我们还没有给舞台上添加任何东西，所以你还看不出来&lt;/p&gt;

&lt;h2 id=&#34;为你的展示列表-display-list-添加内容&#34;&gt;为你的展示列表（display list）添加内容&lt;/h2&gt;

&lt;p&gt;现在你的舞台已经建成，让我们继续往上面添加一些实际的东西。毕竟我们不想一直只到一个黑色的窗口。&lt;/p&gt;

&lt;p&gt;舞台上的东西被添加到一个 &lt;strong&gt;树型结构&lt;/strong&gt; 的展示列表中。你的舞台扮演着这些展示列表的根元素的角色，同时展示列表也会有栈顺序的问题，这意味着有的对象展示在别的对象上面，这由他们被设计的索引深度决定。&lt;/p&gt;

&lt;p&gt;有很多种类的 &lt;strong&gt;展示对象（display object）&lt;/strong&gt; 可以被添加到 &lt;strong&gt;展示列表&lt;/strong&gt; 中，最常见的是 &lt;code&gt;PIXI.Sprite&lt;/code&gt;，它可以添加图片素材。&lt;/p&gt;

&lt;p&gt;由于这个教程是关于创建视差滚动背景的，让我们来添加一个表示远景层的图片。 我们将以添加一行代码来加载 &lt;code&gt;bg-far.png&lt;/code&gt; 文件，这个文件在 resources 目录中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function init() {		
  stage = new PIXI.Container();
  renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;quot;game-canvas&amp;quot;)}
  );

  var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);

  renderer.render(stage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图片素材被加载并保存为纹理（textures），这个纹理可以随后被符加到一个或者多个精灵上面。在上面的代码中我们调用了静态 &lt;code&gt;PIXI.Texture.fromImage()&lt;/code&gt; 方法来创建一个&lt;code&gt;PIXI.Texture&lt;/code&gt; 实例并将 &lt;code&gt;bg-far.png&lt;/code&gt; 文件加载到其中。为了方便使用，我们将纹理引用赋值给名为 &lt;code&gt;farTexture&lt;/code&gt; 的局部变量。&lt;/p&gt;

&lt;p&gt;现在让我们创建一个精灵并将纹理附加到它上面。并将精灵定位在舞台的左上角：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function init() {		
  stage = new PIXI.Container();
  renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;quot;game-canvas&amp;quot;)}
  );

  var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
  far = new PIXI.Sprite(farTexture);
  far.position.x = 0;
  far.position.y = 0;

  renderer.render(stage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;PIXI.Sprite&lt;/code&gt; 类用于创建精灵。它的构造函数将接收一个纹理的引用参数。我们使用了一个名为 far 的全局变量，并将新创建的 sprite 实例存储在其中。&lt;/p&gt;

&lt;p&gt;聪明的你可能已经发现我们是如何使用 position 属性将精灵的 x 和 y 坐标设置到舞台的左上角的。舞台的坐标从左到右，从上到下，这意味着舞台的左上角位置为（0,0），右下角为（512,384）。&lt;/p&gt;

&lt;p&gt;精灵有一个轴心点（pivot），它们可以来回旋转。轴心点也可以用来定位精灵。精灵的默认轴心点设置为左上角（0,0）。这就是为什么当我们的精灵定位在舞台的左上角时，我们将其位置设置为（0,0）。（译者：如果你将轴心点设置到正中央，那位置是（0,0）的精灵就会展示不全）&lt;/p&gt;

&lt;p&gt;最后一步是将精灵添加到舞台上。这是使用 &lt;code&gt;PIXI.Stage&lt;/code&gt; 类的（实例方法） &lt;code&gt;addChild()&lt;/code&gt; 方法完成的。来看看怎么做吧：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
  far = new PIXI.Sprite(farTexture);
  far.position.x = 0;
  far.position.y = 0;
  stage.addChild(far);

  renderer.render(stage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好的，保存你的代码并刷新浏览器。你可能已经满坏期望能看到背景图，但实际上可能看不到。为什么呢？在素材纹理被加载完成之前就渲染它可能并不能有任何效果。因为纹理加载是需要一小段时间的。&lt;/p&gt;

&lt;p&gt;我们可以通过简单地等一段时间，然后再次调用 render 方法来解决这个问题。通过 Chrome 的控制台执行下面的代码即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;renderer.render(stage);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;由于我们之前声明的 &lt;code&gt;renderer&lt;/code&gt; 是全局变量，所以你能在 console 中直接使用它。console 中可以使用任何 JavaScript 中声明的全局变量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;恭喜你！现在应该看到紧贴在屏幕顶部的背景图层了。&lt;/p&gt;

&lt;p&gt;现在让我们继续添舞台上的中间层：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
far = new PIXI.Sprite(farTexture);
far.position.x = 0;
far.position.y = 0;
stage.addChild(far);

var midTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-mid.png&amp;quot;);
mid = new PIXI.Sprite(midTexture);
mid.position.x = 0;
mid.position.y = 128;
stage.addChild(mid);

renderer.render(stage);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存代码并刷新浏览器。你需要再次手动在 Chrome 控制台中调用渲染方法才能看到两个层：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;renderer.render(stage);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为中间层是在远景层 &lt;strong&gt;之后&lt;/strong&gt; 加入的，所以它离我们更进，或者说有更高的层深度。也就是说每次调用 addChild() 方法添加的展示对象都会在上一次添加的对象之上。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我们在这一节的教程中将只会聚焦到远景层和中间层的展示，后面的几节中，我们会实现更复杂的前景层&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;主循环&#34;&gt;主循环&lt;/h2&gt;

&lt;p&gt;现在我们有两个背景图层，我想我们可以尝试实现一些视差滚动，并且还可以找到一种渲染内容的方法，而不用从 JavaScript 控制台中手动执行。&lt;/p&gt;

&lt;p&gt;为了避免疑惑，让我们快速解释下究竟是什么视差滚动。这是一种用于视频游戏的滚动技术，其中背景层在屏幕上移动的速度比前景层慢。这样做会在2D游戏中产生一种幻觉，并让玩家更有沉浸感（更真实）。&lt;/p&gt;

&lt;p&gt;根据上面这些信息，我们可以将它应用于我们的两个精灵层，来生成一个水平视差滚动器，我们将背景层移动到屏幕上的速度比中间层慢一点。为了能让每个层都滚动，我们将创建一个主循环，我们可以不断改变每个层的位置。为了实现这一点，我们将使用 &lt;code&gt;requestAnimationFrame()&lt;/code&gt; 的帮助，这是一个 JavaScript 函数，它能决定浏览器的最佳帧速率，然后在下一次重绘 canvas/stage 时调用指定的函数。我们还将使用这个主循环来 &lt;strong&gt;不断地&lt;/strong&gt; 呈现我们的内容。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var midTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-mid.png&amp;quot;);
mid = new PIXI.Sprite(midTexture);
mid.position.x = 0;
mid.position.y = 128;
stage.addChild(mid);

renderer.render(stage);

requestAnimationFrame(update);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码，我们指定了一个 update 函数，如果你想连续调用 &lt;code&gt;requestAnimationFrame()&lt;/code&gt; ，这将使得你的 update 方法每秒调用 60 次。或者通常称为每秒 60 帧（FPS）。&lt;/p&gt;

&lt;p&gt;我们还没有 update 函数，但是在实现它之前，先删除渲染方法的调用，因为主循环中会处理这个逻辑。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var midTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-mid.png&amp;quot;);
mid = new PIXI.Sprite(midTexture);
mid.position.x = 0;
mid.position.y = 128;
stage.addChild(mid);

renderer.render(stage); // 删除它

requestAnimationFrame(update);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好吧，让我们来编写主循环并让它稍微改变两个层的位置，然后渲染舞台的内容，这样我们就可以看到每个帧重绘的差异。在 &lt;code&gt;init()&lt;/code&gt; 函数之后直接添加 &lt;code&gt;update()&lt;/code&gt; 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  far.position.x -= 0.128;
  mid.position.x -= 0.64;

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前两行代码更新了远景层和中间层精灵的水平位置。请注意，我们将远层向左移动0.128 像素，而我们将中间层向左移动 0.64 像素。要向左移动某些东西，我们得使用负值，而正值则会将其移动到右侧。另外请注意，我们将精灵移动了 &lt;strong&gt;小数&lt;/strong&gt; 像素。 Pixi 的渲染器可以存储它们并使用子像素来处理它们位置。当你想要非常缓慢地在屏幕上轻推东西时，这是理想的选择。&lt;/p&gt;

&lt;p&gt;在循环结束时，我们再次调用 &lt;code&gt;requestAnimationFrame()&lt;/code&gt; 函数，以确保在下次再次绘制画布时自动再次调用 &lt;code&gt;update()&lt;/code&gt;。正是它确保了我们的主循环被连续调用，从而能确保我们的视差层在屏幕上稳定移动。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img14.360buyimg.com/devfe/jfs/t1/25862/18/10942/84129/5c8b2631E9323cbf6/487b26b72c59b787.png&#34; alt=&#34;ps-tut1-screenshot5&#34; /&gt;&lt;/p&gt;

&lt;p&gt;保存代码并刷新浏览器看看它长什么样子。你应该看到两个图层自动呈现在屏幕上。此外，当两个图层都在移动时，中间层实际上比远景层更快地移动，从而为场景提供深度感。但是你也应该发现有一个明显问题：当每个精灵移出屏幕的左侧时，它会向右边留下一个间隙。换句话说，两个图层的图形都没有循环，以给出连续滚动的错觉。还好，有一个解决方案。&lt;/p&gt;

&lt;h2 id=&#34;使用瓦片-平铺-精灵&#34;&gt;使用瓦片（平铺）精灵&lt;/h2&gt;

&lt;p&gt;到目前为止，我们已经学会使用 &lt;code&gt;PIXI.Sprite&lt;/code&gt; 类来表示展示列表中的对象。然而，pixi.js 还提供了几个其他 &lt;strong&gt;展示对象&lt;/strong&gt; 以满足不同的需求。&lt;/p&gt;

&lt;p&gt;如果你细心的观察一下 bg-far.png 和 bg-mid.png 的话，你应该注意到这两个图像都设计成可以水平平铺的（译：平铺就好比瓦片）。检查每个图像的左右边缘。你可以发现，最右边的边缘完美地匹配连接到最左边的边缘。换句话说，两个图像都被设计成无缝循环的。&lt;/p&gt;

&lt;p&gt;因此，如果有一种方法可以简单地移动每个精灵的纹理以给出他们正在移动的错觉，而不是物理地移动我们的远景层和中间层精灵的位置，这不是很好吗？值得庆幸的是 pixi.js 提供了 PIXI.extras.TilingSprite 类，它就是用来做这个的。&lt;/p&gt;

&lt;p&gt;所以，让我们对代码进行一些调整，来使用瓦片精灵。我们首先关注远景层。继续从建立函数中删除以下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);
far = new PIXI.Sprite(farTexture); // 删除它
far.position.x = 0;
far.position.y = 0;
stage.addChild(far);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;替换成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;far = new PIXI.extras.TilingSprite(farTexture, 512, 256);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后设置他们的位置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;far.tilePosition.x = 0;
far.tilePosition.y = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在继续之前，让我们讨论 TilingSprite 类的构造函数及它的 tilePosition 属性。&lt;/p&gt;

&lt;p&gt;和 Sprite 类的单个参数比较，您会注意到 TilingSprite 类的构造函数需要 3 个参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;far = new PIXI.extras.TilingSprite(farTexture, 512, 256);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它的第一个参数与之前相同：纹理的引用。第二个和第三个参数分别表示瓦片精灵的宽度和高度。通常，将这两个参数设置为 &lt;strong&gt;纹理&lt;/strong&gt; 的宽度和高度，比如 &lt;code&gt;bg-far.png&lt;/code&gt; 为 512 x 256 像素。&lt;/p&gt;

&lt;p&gt;我们又一次的硬编码的传入了两个宽高参数，可以通过下面的方法改善：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;far = new PIXI.extras.TilingSprite(
  farTexture,
  farTexture.baseTexture.width,
  farTexture.baseTexture.height
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们还利用了平铺精灵的 tilePosition 属性，该属性用于偏移精灵纹理的位置。换句话说，通过调整偏移量，就可以水平或垂直地移动纹理，并使纹理环绕。本质上，你可以模拟滚动而无需实际更改精灵的位置。&lt;/p&gt;

&lt;p&gt;我们将精灵的 tilePosition 属性默认设置为（0,0），这意味着远景层的外观在初始化的状态下没有变化：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;far.tilePosition.x = 0;
far.tilePosition.y = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;剩下要做的就是通过不断更新精灵的 tilePosition 属性的水平偏移来模拟滚动。为此，我们将对 &lt;code&gt;update()&lt;/code&gt; 函数进行更改。首先删除以下行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  far.position.x -= 0.128; // 删除它
  mid.position.x -= 0.64;

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;替换成下面这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  far.tilePosition.x -= 0.128;
  mid.position.x -= 0.64;

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在保存 index.html 并再次刷新浏览器。你将看到远景层无缝滚动并一直重复着，这和我们的预期结果的一样。&lt;/p&gt;

&lt;p&gt;好的，让我们继续为中间层做出相同的修改。以下是进行更改后 &lt;code&gt;init()&lt;/code&gt; 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function init() {
  stage = new PIXI.Container();
  renderer = PIXI.autoDetectRenderer(
    512,
    384,
    {view:document.getElementById(&amp;quot;game-canvas&amp;quot;)}
  );

  var farTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-far.png&amp;quot;);	
  far = new PIXI.extras.TilingSprite(farTexture, 512, 256);
  far.position.x = 0;
  far.position.y = 0;
  far.tilePosition.x = 0;
  far.tilePosition.y = 0;
  stage.addChild(far);

  var midTexture = PIXI.Texture.fromImage(&amp;quot;resources/bg-mid.png&amp;quot;);
  mid = new PIXI.extras.TilingSprite(midTexture, 512, 256);
  mid.position.x = 0;
  mid.position.y = 128;
  mid.tilePosition.x = 0;
  mid.tilePosition.y = 0;
  stage.addChild(mid);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在继续对 &lt;code&gt;update()&lt;/code&gt; 函数进行以下重构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function update() {
  far.tilePosition.x -= 0.128;
  mid.tilePosition.x -= 0.64;

  renderer.render(stage);

  requestAnimationFrame(update);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存并测试你的代码。这次你应该看到两个图层完全地滚动，同时环绕屏幕的左右边界。&lt;/p&gt;

&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;我们已经介绍了pixi.js 的一些基础知识，并了解了 &lt;code&gt;PIXI.extras.TilingSprite&lt;/code&gt; 如何用于创建无限滚动图层的。我们还看到了如何使用 &lt;code&gt;addChild()&lt;/code&gt; 将瓦片精灵堆叠在一起以产生真实的视差滚动。&lt;/p&gt;

&lt;p&gt;我建议你继续尝试使用 Pixi 并查看它的文档和代码示例。两者都可以在 PixiJS &lt;a href=&#34;http://www.pixijs.com/&#34;&gt;官方网站&lt;/a&gt; 上找到。&lt;/p&gt;

&lt;h2 id=&#34;下集预告&#34;&gt;下集预告…&lt;/h2&gt;

&lt;p&gt;虽然我们有一个水平视差滚动器并且能运行起来，但它仍然有点简单。下次我们将介绍 &lt;strong&gt;视口&lt;/strong&gt; 和 &lt;strong&gt;世界&lt;/strong&gt; 位置的概念，如果你想最终将你的卷轴添加到游戏中，这两个都很重要。它还将使我们处于添加前景层的良好位置，这将代表一个简单的平台游戏地图。&lt;/p&gt;

&lt;p&gt;我们将花很多时间来重构现有的代码库。我们将采用更加面向对象的架构，摆脱目前对全局变量的依赖。在下一个教程结束时，所有滚动功能都将整齐地包含在一个类中。&lt;/p&gt;

&lt;p&gt;我希望这个教程能帮助到你，也希望下次能在 &lt;strong&gt;第二部分&lt;/strong&gt; 中见到你。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>